{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "1ef0c3a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "from datetime import datetime\n",
    "# pd.set_option('display.max_columns', None)\n",
    "# Files for upload\n",
    "path1 = r'C:\\Users\\jni\\Desktop\\1820_Combined.xlsx'\n",
    "path2 = r'C:\\Users\\jni\\Desktop\\Combined+ (Multiple Connections) Extract_Extract.csv'\n",
    "path3 = r'C:\\Users\\jni\\Desktop\\Extract.xlsx'\n",
    "\n",
    "df1 = pd.read_excel(path1)\n",
    "df2 = pd.read_csv(path2)\n",
    "df3 = pd.read_excel(path3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "521a642a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEAL#</th>\n",
       "      <th>OPEN_DATE</th>\n",
       "      <th>B1_SSN</th>\n",
       "      <th>B1_State</th>\n",
       "      <th>FICO</th>\n",
       "      <th>CROSSINDUSTRYSCORE</th>\n",
       "      <th>SCORE</th>\n",
       "      <th>BAD_RATE</th>\n",
       "      <th>FINALSCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2666558</td>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>921-71-9715</td>\n",
       "      <td>CA</td>\n",
       "      <td>580.0</td>\n",
       "      <td>593.0</td>\n",
       "      <td>238</td>\n",
       "      <td>0.2839</td>\n",
       "      <td>624.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2674123</td>\n",
       "      <td>2020-02-05</td>\n",
       "      <td>609-44-3206</td>\n",
       "      <td>CA</td>\n",
       "      <td>576.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>194</td>\n",
       "      <td>NaN</td>\n",
       "      <td>549.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2681800</td>\n",
       "      <td>2020-02-12</td>\n",
       "      <td>595-87-6200</td>\n",
       "      <td>FL</td>\n",
       "      <td>498.0</td>\n",
       "      <td>670.0</td>\n",
       "      <td>216</td>\n",
       "      <td>0.4632</td>\n",
       "      <td>524.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2684461</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>324-29-0537</td>\n",
       "      <td>TX</td>\n",
       "      <td>9003.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>206</td>\n",
       "      <td>0.3850</td>\n",
       "      <td>708.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2685115</td>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>594-59-0559</td>\n",
       "      <td>FL</td>\n",
       "      <td>9003.0</td>\n",
       "      <td>537.0</td>\n",
       "      <td>152</td>\n",
       "      <td>0.6808</td>\n",
       "      <td>571.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     DEAL#  OPEN_DATE       B1_SSN B1_State    FICO  CROSSINDUSTRYSCORE SCORE  \\\n",
       "0  2666558 2020-01-13  921-71-9715       CA   580.0               593.0   238   \n",
       "1  2674123 2020-02-05  609-44-3206       CA   576.0                 NaN   194   \n",
       "2  2681800 2020-02-12  595-87-6200       FL   498.0               670.0   216   \n",
       "3  2684461 2020-01-02  324-29-0537       TX  9003.0               222.0   206   \n",
       "4  2685115 2020-02-25  594-59-0559       FL  9003.0               537.0   152   \n",
       "\n",
       "   BAD_RATE  FINALSCORE  \n",
       "0    0.2839       624.0  \n",
       "1       NaN       549.0  \n",
       "2    0.4632       524.0  \n",
       "3    0.3850       708.0  \n",
       "4    0.6808       571.0  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "626a5215",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEAL#</th>\n",
       "      <th>OPEN_DATE</th>\n",
       "      <th>B1_SSN</th>\n",
       "      <th>B1_State</th>\n",
       "      <th>FICO</th>\n",
       "      <th>CROSSINDUSTRYSCORE</th>\n",
       "      <th>SCORE</th>\n",
       "      <th>BAD_RATE</th>\n",
       "      <th>FINALSCORE</th>\n",
       "      <th>SSN_Filiter</th>\n",
       "      <th>LN_Filiter</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2666558</td>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>921-71-9715</td>\n",
       "      <td>CA</td>\n",
       "      <td>580.0</td>\n",
       "      <td>593.0</td>\n",
       "      <td>238</td>\n",
       "      <td>0.2839</td>\n",
       "      <td>624.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>Has LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2674123</td>\n",
       "      <td>2020-02-05</td>\n",
       "      <td>609-44-3206</td>\n",
       "      <td>CA</td>\n",
       "      <td>576.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>194</td>\n",
       "      <td>NaN</td>\n",
       "      <td>549.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>No LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2681800</td>\n",
       "      <td>2020-02-12</td>\n",
       "      <td>595-87-6200</td>\n",
       "      <td>FL</td>\n",
       "      <td>498.0</td>\n",
       "      <td>670.0</td>\n",
       "      <td>216</td>\n",
       "      <td>0.4632</td>\n",
       "      <td>524.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>Has LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2684461</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>324-29-0537</td>\n",
       "      <td>TX</td>\n",
       "      <td>9003.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>206</td>\n",
       "      <td>0.3850</td>\n",
       "      <td>708.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>No LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2685115</td>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>594-59-0559</td>\n",
       "      <td>FL</td>\n",
       "      <td>9003.0</td>\n",
       "      <td>537.0</td>\n",
       "      <td>152</td>\n",
       "      <td>0.6808</td>\n",
       "      <td>571.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>Has LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     DEAL#  OPEN_DATE       B1_SSN B1_State    FICO  CROSSINDUSTRYSCORE SCORE  \\\n",
       "0  2666558 2020-01-13  921-71-9715       CA   580.0               593.0   238   \n",
       "1  2674123 2020-02-05  609-44-3206       CA   576.0                 0.0   194   \n",
       "2  2681800 2020-02-12  595-87-6200       FL   498.0               670.0   216   \n",
       "3  2684461 2020-01-02  324-29-0537       TX  9003.0               222.0   206   \n",
       "4  2685115 2020-02-25  594-59-0559       FL  9003.0               537.0   152   \n",
       "\n",
       "   BAD_RATE  FINALSCORE SSN_Filiter LN_Filiter  year  \n",
       "0    0.2839       624.0     Has SSN     Has LN  2020  \n",
       "1       NaN       549.0     Has SSN      No LN  2020  \n",
       "2    0.4632       524.0     Has SSN     Has LN  2020  \n",
       "3    0.3850       708.0     Has SSN      No LN  2020  \n",
       "4    0.6808       571.0     Has SSN     Has LN  2020  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['year'] = pd.DatetimeIndex(df1['OPEN_DATE']).year\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "2b27c669",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new column for SSN Filiter\n",
    "# Filling Null values with 0\n",
    "df1['B1_SSN'] = df1['B1_SSN'].fillna(0)\n",
    "\n",
    "# Defining conditions for filitering\n",
    "conditions = [\n",
    "    (df1['B1_SSN'] == 0),\n",
    "    (df1['B1_SSN'] == '000-00-0000'),\n",
    "    ]\n",
    "# Defining column names for filiters\n",
    "values = ['000 SSN', '000 SSN']\n",
    "\n",
    "# Applying the filiter\n",
    "df1['SSN_Filiter'] = np.select(conditions, values)\n",
    "\n",
    "# If a condition is not stated, the value of the new column will be 0. This is defining the 'Other' cases\n",
    "df1['SSN_Filiter'] = df1['SSN_Filiter'].replace('0','Has SSN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "17bc35f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Has SSN', '000 SSN'], dtype=object)"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['SSN_Filiter'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "cacd1eb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new column for LN Filiter\n",
    "# Filling Null values with 0\n",
    "df1['CROSSINDUSTRYSCORE'] = df1['CROSSINDUSTRYSCORE'].fillna(0)\n",
    "\n",
    "# Defining conditions for filitering\n",
    "conditions = [\n",
    "    (df1['CROSSINDUSTRYSCORE'] == 0),\n",
    "    (df1['CROSSINDUSTRYSCORE'] <= 501),\n",
    "    (df1['CROSSINDUSTRYSCORE'] >= 900)\n",
    "    ]\n",
    "# Defining column names for filiters\n",
    "values = ['No LN', 'No LN','No LN']\n",
    "\n",
    "# Applying the filiter\n",
    "df1['LN_Filiter'] = np.select(conditions, values)\n",
    "\n",
    "# If a condition is not stated, the value of the new column will be 0. This is defining the 'Other' cases\n",
    "df1['LN_Filiter'] = df1['LN_Filiter'].replace('0','Has LN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "2d555bfc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEAL#</th>\n",
       "      <th>OPEN_DATE</th>\n",
       "      <th>B1_SSN</th>\n",
       "      <th>B1_State</th>\n",
       "      <th>FICO</th>\n",
       "      <th>CROSSINDUSTRYSCORE</th>\n",
       "      <th>SCORE</th>\n",
       "      <th>BAD_RATE</th>\n",
       "      <th>FINALSCORE</th>\n",
       "      <th>SSN_Filiter</th>\n",
       "      <th>LN_Filiter</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2666558</td>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>921-71-9715</td>\n",
       "      <td>CA</td>\n",
       "      <td>580.0</td>\n",
       "      <td>593.0</td>\n",
       "      <td>238</td>\n",
       "      <td>0.2839</td>\n",
       "      <td>624.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>Has LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2674123</td>\n",
       "      <td>2020-02-05</td>\n",
       "      <td>609-44-3206</td>\n",
       "      <td>CA</td>\n",
       "      <td>576.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>194</td>\n",
       "      <td>NaN</td>\n",
       "      <td>549.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>No LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2681800</td>\n",
       "      <td>2020-02-12</td>\n",
       "      <td>595-87-6200</td>\n",
       "      <td>FL</td>\n",
       "      <td>498.0</td>\n",
       "      <td>670.0</td>\n",
       "      <td>216</td>\n",
       "      <td>0.4632</td>\n",
       "      <td>524.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>Has LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2684461</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>324-29-0537</td>\n",
       "      <td>TX</td>\n",
       "      <td>9003.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>206</td>\n",
       "      <td>0.3850</td>\n",
       "      <td>708.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>No LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2685115</td>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>594-59-0559</td>\n",
       "      <td>FL</td>\n",
       "      <td>9003.0</td>\n",
       "      <td>537.0</td>\n",
       "      <td>152</td>\n",
       "      <td>0.6808</td>\n",
       "      <td>571.0</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>Has LN</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     DEAL#  OPEN_DATE       B1_SSN B1_State    FICO  CROSSINDUSTRYSCORE SCORE  \\\n",
       "0  2666558 2020-01-13  921-71-9715       CA   580.0               593.0   238   \n",
       "1  2674123 2020-02-05  609-44-3206       CA   576.0                 0.0   194   \n",
       "2  2681800 2020-02-12  595-87-6200       FL   498.0               670.0   216   \n",
       "3  2684461 2020-01-02  324-29-0537       TX  9003.0               222.0   206   \n",
       "4  2685115 2020-02-25  594-59-0559       FL  9003.0               537.0   152   \n",
       "\n",
       "   BAD_RATE  FINALSCORE SSN_Filiter LN_Filiter  year  \n",
       "0    0.2839       624.0     Has SSN     Has LN  2020  \n",
       "1       NaN       549.0     Has SSN      No LN  2020  \n",
       "2    0.4632       524.0     Has SSN     Has LN  2020  \n",
       "3    0.3850       708.0     Has SSN      No LN  2020  \n",
       "4    0.6808       571.0     Has SSN     Has LN  2020  "
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "5febff9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DEAL#                 19723\n",
       "OPEN_DATE             19723\n",
       "B1_SSN                19723\n",
       "B1_State              19723\n",
       "FICO                   4257\n",
       "CROSSINDUSTRYSCORE    19723\n",
       "SCORE                 19665\n",
       "BAD_RATE              19664\n",
       "FINALSCORE            19438\n",
       "SSN_Filiter           19723\n",
       "LN_Filiter            19723\n",
       "year                  19723\n",
       "dtype: int64"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Selecting Data After Filitering\n",
    "df_2020 = df1[df1['year'] == 2020]\n",
    "df_2020 = df_2020[df_2020['LN_Filiter'] == 'No LN']\n",
    "df_2020 = df_2020[df_2020['SSN_Filiter'] == '000 SSN']\n",
    "df_2020.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "96fa3f34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEAL#</th>\n",
       "      <th>OPEN_DATE</th>\n",
       "      <th>B1_SSN</th>\n",
       "      <th>B1_State</th>\n",
       "      <th>FICO</th>\n",
       "      <th>CROSSINDUSTRYSCORE</th>\n",
       "      <th>SCORE</th>\n",
       "      <th>BAD_RATE</th>\n",
       "      <th>FINALSCORE</th>\n",
       "      <th>year</th>\n",
       "      <th>SSN_Filiter</th>\n",
       "      <th>LN_Filiter</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2674123</td>\n",
       "      <td>2020-02-05</td>\n",
       "      <td>609-44-3206</td>\n",
       "      <td>CA</td>\n",
       "      <td>576.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>194</td>\n",
       "      <td>NaN</td>\n",
       "      <td>549.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>No LN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2684461</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>324-29-0537</td>\n",
       "      <td>TX</td>\n",
       "      <td>9003.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>206</td>\n",
       "      <td>0.3850</td>\n",
       "      <td>708.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>No LN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2685658</td>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>000-00-0000</td>\n",
       "      <td>FL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222</td>\n",
       "      <td>0.3980</td>\n",
       "      <td>707.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>No LN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2686013</td>\n",
       "      <td>2020-03-02</td>\n",
       "      <td>000-00-0000</td>\n",
       "      <td>CA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>222.0</td>\n",
       "      <td>222</td>\n",
       "      <td>0.3447</td>\n",
       "      <td>796.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>No LN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2686218</td>\n",
       "      <td>2020-01-06</td>\n",
       "      <td>000-00-0000</td>\n",
       "      <td>FL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>222.0</td>\n",
       "      <td>226</td>\n",
       "      <td>0.0696</td>\n",
       "      <td>658.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>Has SSN</td>\n",
       "      <td>No LN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      DEAL#  OPEN_DATE       B1_SSN B1_State    FICO  CROSSINDUSTRYSCORE  \\\n",
       "1   2674123 2020-02-05  609-44-3206       CA   576.0                 0.0   \n",
       "3   2684461 2020-01-02  324-29-0537       TX  9003.0               222.0   \n",
       "6   2685658 2020-02-25  000-00-0000       FL     NaN               222.0   \n",
       "9   2686013 2020-03-02  000-00-0000       CA     NaN               222.0   \n",
       "11  2686218 2020-01-06  000-00-0000       FL     NaN               222.0   \n",
       "\n",
       "   SCORE  BAD_RATE  FINALSCORE  year SSN_Filiter LN_Filiter  \n",
       "1    194       NaN       549.0  2020     Has SSN      No LN  \n",
       "3    206    0.3850       708.0  2020     Has SSN      No LN  \n",
       "6    222    0.3980       707.0  2020     Has SSN      No LN  \n",
       "9    222    0.3447       796.0  2020     Has SSN      No LN  \n",
       "11   226    0.0696       658.0  2020     Has SSN      No LN  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2020.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ad16d2bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#temp = pd.qcut(df_2020['FINALSCORE'], q=10,retbins=True)\n",
    "temp = pd.qcut(df_2020['FINALSCORE'], q=10,retbins=True,precision=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cf02f30d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0         (621.0, 665.0]\n",
       " 1         (518.0, 570.0]\n",
       " 2         (518.0, 570.0]\n",
       " 3         (697.0, 725.0]\n",
       " 4         (570.0, 621.0]\n",
       "                ...      \n",
       " 177173    (621.0, 665.0]\n",
       " 177174               NaN\n",
       " 177175    (665.0, 697.0]\n",
       " 177176               NaN\n",
       " 177177               NaN\n",
       " Name: FINALSCORE, Length: 177178, dtype: category\n",
       " Categories (10, interval[float64]): [(16.9, 446.0] < (446.0, 518.0] < (518.0, 570.0] < (570.0, 621.0] ... (697.0, 725.0] < (725.0, 751.0] < (751.0, 782.0] < (782.0, 998.0]],\n",
       " array([ 17., 446., 518., 570., 621., 665., 697., 725., 751., 782., 998.]))"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f6c7017",
   "metadata": {},
   "source": [
    "# Df 3 - Extracts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "97cf46e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEAL#</th>\n",
       "      <th>OPEN_DATE</th>\n",
       "      <th>B1_SSN</th>\n",
       "      <th>B1_State</th>\n",
       "      <th>FICO</th>\n",
       "      <th>CROSSINDUSTRYSCORE</th>\n",
       "      <th>SCORE</th>\n",
       "      <th>BAD_RATE</th>\n",
       "      <th>FINALSCORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2623842</td>\n",
       "      <td>2019-09-14</td>\n",
       "      <td>000-00-0000</td>\n",
       "      <td>TX</td>\n",
       "      <td>NaN</td>\n",
       "      <td>643.0</td>\n",
       "      <td>226.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>678.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2583225</td>\n",
       "      <td>2019-07-12</td>\n",
       "      <td>592-23-8463</td>\n",
       "      <td>CA</td>\n",
       "      <td>523.0</td>\n",
       "      <td>680.0</td>\n",
       "      <td>227.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>502.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2768083</td>\n",
       "      <td>2020-05-16</td>\n",
       "      <td>552-87-0662</td>\n",
       "      <td>CA</td>\n",
       "      <td>596.0</td>\n",
       "      <td>576.0</td>\n",
       "      <td>220.0</td>\n",
       "      <td>0.4089</td>\n",
       "      <td>563.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2768086</td>\n",
       "      <td>2020-05-16</td>\n",
       "      <td>000-00-0000</td>\n",
       "      <td>FL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>222.0</td>\n",
       "      <td>225.0</td>\n",
       "      <td>0.2838</td>\n",
       "      <td>815.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2620055</td>\n",
       "      <td>2019-09-08</td>\n",
       "      <td>768-68-5298</td>\n",
       "      <td>FL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>621.0</td>\n",
       "      <td>238.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>819.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     DEAL#  OPEN_DATE       B1_SSN B1_State   FICO  CROSSINDUSTRYSCORE  SCORE  \\\n",
       "0  2623842 2019-09-14  000-00-0000       TX    NaN               643.0  226.0   \n",
       "1  2583225 2019-07-12  592-23-8463       CA  523.0               680.0  227.0   \n",
       "2  2768083 2020-05-16  552-87-0662       CA  596.0               576.0  220.0   \n",
       "3  2768086 2020-05-16  000-00-0000       FL    NaN               222.0  225.0   \n",
       "4  2620055 2019-09-08  768-68-5298       FL    NaN               621.0  238.0   \n",
       "\n",
       "   BAD_RATE  FINALSCORE  \n",
       "0       NaN       678.0  \n",
       "1       NaN       502.0  \n",
       "2    0.4089       563.0  \n",
       "3    0.2838       815.0  \n",
       "4       NaN       819.0  "
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "ce12222e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEAL#</th>\n",
       "      <th>OPEN_DATE</th>\n",
       "      <th>B1_SSN</th>\n",
       "      <th>B1_State</th>\n",
       "      <th>FICO</th>\n",
       "      <th>CROSSINDUSTRYSCORE</th>\n",
       "      <th>SCORE</th>\n",
       "      <th>BAD_RATE</th>\n",
       "      <th>FINALSCORE</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2623842</td>\n",
       "      <td>2019-09-14</td>\n",
       "      <td>000-00-0000</td>\n",
       "      <td>TX</td>\n",
       "      <td>NaN</td>\n",
       "      <td>643.0</td>\n",
       "      <td>226.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>678.0</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2583225</td>\n",
       "      <td>2019-07-12</td>\n",
       "      <td>592-23-8463</td>\n",
       "      <td>CA</td>\n",
       "      <td>523.0</td>\n",
       "      <td>680.0</td>\n",
       "      <td>227.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>502.0</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2768083</td>\n",
       "      <td>2020-05-16</td>\n",
       "      <td>552-87-0662</td>\n",
       "      <td>CA</td>\n",
       "      <td>596.0</td>\n",
       "      <td>576.0</td>\n",
       "      <td>220.0</td>\n",
       "      <td>0.4089</td>\n",
       "      <td>563.0</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2768086</td>\n",
       "      <td>2020-05-16</td>\n",
       "      <td>000-00-0000</td>\n",
       "      <td>FL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>222.0</td>\n",
       "      <td>225.0</td>\n",
       "      <td>0.2838</td>\n",
       "      <td>815.0</td>\n",
       "      <td>2020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2620055</td>\n",
       "      <td>2019-09-08</td>\n",
       "      <td>768-68-5298</td>\n",
       "      <td>FL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>621.0</td>\n",
       "      <td>238.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>819.0</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     DEAL#  OPEN_DATE       B1_SSN B1_State   FICO  CROSSINDUSTRYSCORE  SCORE  \\\n",
       "0  2623842 2019-09-14  000-00-0000       TX    NaN               643.0  226.0   \n",
       "1  2583225 2019-07-12  592-23-8463       CA  523.0               680.0  227.0   \n",
       "2  2768083 2020-05-16  552-87-0662       CA  596.0               576.0  220.0   \n",
       "3  2768086 2020-05-16  000-00-0000       FL    NaN               222.0  225.0   \n",
       "4  2620055 2019-09-08  768-68-5298       FL    NaN               621.0  238.0   \n",
       "\n",
       "   BAD_RATE  FINALSCORE  year  \n",
       "0       NaN       678.0  2019  \n",
       "1       NaN       502.0  2019  \n",
       "2    0.4089       563.0  2020  \n",
       "3    0.2838       815.0  2020  \n",
       "4       NaN       819.0  2019  "
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3['year'] = pd.DatetimeIndex(df3['OPEN_DATE']).year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "960a2ddc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new column for SSN Filiter\n",
    "# Filling Null values with 0\n",
    "df3['B1_SSN'] = df3['B1_SSN'].fillna(0)\n",
    "\n",
    "# Defining conditions for filitering\n",
    "conditions = [\n",
    "    (df3['B1_SSN'] == 0),\n",
    "    (df3['B1_SSN'] == '000-00-0000'),\n",
    "    ]\n",
    "# Defining column names for filiters\n",
    "values = ['000 SSN', '000 SSN']\n",
    "\n",
    "# Applying the filiter\n",
    "df3['SSN_Filiter'] = np.select(conditions, values)\n",
    "\n",
    "# If a condition is not stated, the value of the new column will be 0. This is defining the 'Other' cases\n",
    "df3['SSN_Filiter'] = df3['SSN_Filiter'].replace('0','Has SSN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "4358ca87",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new column for LN Filiter\n",
    "# Filling Null values with 0\n",
    "df3['CROSSINDUSTRYSCORE'] = df3['CROSSINDUSTRYSCORE'].fillna(0)\n",
    "\n",
    "# Defining conditions for filitering\n",
    "conditions = [\n",
    "    (df3['CROSSINDUSTRYSCORE'] == 0),\n",
    "    (df3['CROSSINDUSTRYSCORE'] <= 501),\n",
    "    (df3['CROSSINDUSTRYSCORE'] >= 900)\n",
    "    ]\n",
    "# Defining column names for filiters\n",
    "values = ['No LN', 'No LN','No LN']\n",
    "\n",
    "# Applying the filiter\n",
    "df3['LN_Filiter'] = np.select(conditions, values)\n",
    "\n",
    "# If a condition is not stated, the value of the new column will be 0. This is defining the 'Other' cases\n",
    "df3['LN_Filiter'] = df3['LN_Filiter'].replace('0','Has LN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "aa529c54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DEAL#                 3639\n",
       "OPEN_DATE             3639\n",
       "B1_SSN                3639\n",
       "B1_State              3639\n",
       "FICO                   367\n",
       "CROSSINDUSTRYSCORE    3639\n",
       "SCORE                 3636\n",
       "BAD_RATE              3621\n",
       "FINALSCORE            3597\n",
       "year                  3639\n",
       "SSN_Filiter           3639\n",
       "LN_Filiter            3639\n",
       "dtype: int64"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Selecting Data After Filitering\n",
    "df_2020 = df3[df3['year'] == 2020]\n",
    "df_2020 = df_2020[df_2020['LN_Filiter'] == 'No LN']\n",
    "df_2020 = df_2020[df_2020['SSN_Filiter'] == '000 SSN']\n",
    "df_2020.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "56c4b8c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = pd.qcut(df_2020['FINALSCORE'], q=10,retbins=True,precision=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "ab7c9768",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3        (803.0, 820.0]\n",
       " 50       (719.0, 739.0]\n",
       " 125      (753.0, 764.0]\n",
       " 127      (753.0, 764.0]\n",
       " 128      (273.9, 688.0]\n",
       "               ...      \n",
       " 59663    (739.0, 753.0]\n",
       " 60665    (273.9, 688.0]\n",
       " 60666    (803.0, 820.0]\n",
       " 60672    (753.0, 764.0]\n",
       " 60675    (739.0, 753.0]\n",
       " Name: FINALSCORE, Length: 3639, dtype: category\n",
       " Categories (10, interval[float64]): [(273.9, 688.0] < (688.0, 719.0] < (719.0, 739.0] < (739.0, 753.0] ... (777.0, 788.2] < (788.2, 803.0] < (803.0, 820.0] < (820.0, 929.0]],\n",
       " array([274. , 688. , 719. , 739. , 753. , 764. , 777. , 788.2, 803. ,\n",
       "        820. , 929. ]))"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
