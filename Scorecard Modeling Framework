{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd #this for importing/exporting data and creating dataframes\n",
    "import numpy as np #this is for scientific computation. \n",
    "import copy #this allows to copy\n",
    "import scipy.stats.stats as stats #this is probability distributions and a library of statistical functions\n",
    "from sklearn.model_selection import train_test_split #this is to split the data into train and test (validation)\n",
    "from sklearn.linear_model import LogisticRegression #this is logistic regression\n",
    "from sklearn.metrics import roc_auc_score #to calculate the ROC\n",
    "import matplotlib.pyplot as plt #this is for the graph\n",
    "from sklearn.tree import DecisionTreeClassifier #this is for decision tree\n",
    "from sklearn import tree #this is for decision tree too\n",
    "pd.options.mode.chained_assignment = None  # default='warn' #this is for hide warm\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import Node - Import Accept File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import data\n",
    "db = pd.read_csv(r\"\\\\neptune\\RAD\\4 Models\\Scorecard 8.0_Redesign\\Modeling Data\\Valid Credit\\Clarity Hit\\With Inquiry\\Accepts_5630.csv\") #imports the accepted file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# db.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Frequency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculating the frequency\n",
    "Count_Bad = db.groupby(\"TARGET_GB_NEW\").count().loc['BAD','LN_Key2']\n",
    "Count_Good_INDET = db.groupby(\"TARGET_GB_NEW\").count().loc[['GOOD','INDET'],'LN_Key2'].sum()\n",
    "if Count_Good_INDET > Count_Bad:\n",
    "    freq_dic = {'GOOD':Count_Good_INDET/Count_Bad,'BAD':1}\n",
    "else:\n",
    "    freq_dic = {'GOOD':1,'BAD':Count_Bad/Count_Good_INDET}\n",
    "# freq_dic # Uncomment for frequency dic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding the frequency to the dataframe\n",
    "def Add_Frequency(row,freq_dic):\n",
    "    if row[\"TARGET_GB_NEW\"] == 'BAD':\n",
    "        return freq_dic['BAD']\n",
    "    else:\n",
    "        return freq_dic['GOOD']\n",
    "\n",
    "db['Frequency'] = db.apply(lambda row : Add_Frequency(row,freq_dic), axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# db[['TARGET_GB_NEW','Frequency']].head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Filter Node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# filter Good and Bad\n",
    "Goods=db[db[\"TARGET_GB_NEW\"]==\"GOOD\"]  #we use two db because one db will give the count of the whole dataset\n",
    "Bads=db[db[\"TARGET_GB_NEW\"]==\"BAD\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(\"Good:\",len(Goods), \"Bad:\",len(Bads))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sample Node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sample down\n",
    "if len(Goods) >= len(Bads):\n",
    "    Bad = Bads\n",
    "    Good = Goods.sample(len(Bad),random_state =2602)\n",
    "    #print(\"Good:\",len(Good),\"Bad:\",len(Bad))\n",
    "else:\n",
    "    Good = Goods\n",
    "    Bad = Bads.sample(len(Good),random_state=2602)\n",
    "    #print(\"Good:\",len(Good),\"Bad:\",len(Bad))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(\"Good:\",len(Good),\"Bad:\",len(Bad))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Append Node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# append Good and Bad\n",
    "GB=Good.append(Bad) #can do Good.append(Bad)\n",
    "# print(\"append Good and Bad:\",len(GB)) #GB #will give the dataset that has the good and bad appended"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(\"append Good and Bad:\",len(GB))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#not included in code\n",
    "# Gives the data Types\n",
    "# data_type = GB.dtypes #gives the datatype for each variable\n",
    "# data_type #prints the list of the variable with the datatype"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Removing Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# selecting all categorical variable and unnecessary columns\n",
    "a = GB.dtypes[GB.dtypes=='object'].index.tolist()\n",
    "b = GB.dtypes[GB.dtypes=='datetime64[ns]'].index.tolist()\n",
    "a.extend(b)\n",
    "a.extend(['CONTROL_NB','RECORD_NB','RECORD_NB.1','TRADE_DATE','TRADE_DATE.1','FICCLAV8_SCORE','DTI1_SCORE_TOTAL_DEBT','INCOME_INSIGHT_SCORE'\\\n",
    "         ,'CLEAR_EARLY_RISK_SCORE','CASH_DOWNPCT','OPENINGBALANCE_PCT','PTI', 'NET_AFPCT','LTV'\\\n",
    "         ,'LN_Key2.1','LN_Key2.2','LN_Key2.3','TARGET_GB','Frequency'\\\n",
    "         ,'addrcurrentavmvalue60month','addrinputavmvalue12month','addrinputavmvalue','addrcurrentavmvalue','IQA9510','addrcurrentavmratio12monthprior','addrcurrentavmratio60monthprior','addrcurrentavmvalue12month'\\\n",
    "         ,'IQF9410','addrinputavmratio12monthprior','IQF9417','IQF9510','IQF9540','subjectage','addrinputavmratio60monthprior','addrinputavmvalue60month','IQF9416','IQF9415','ssndatelowissued','ssndeceased','subjectdeceased'\\\n",
    "         ,'IQT9536'])#extends the above \"a\" list to include other columns that we do not need \n",
    "#a #a #will print the list \"a\" that includes all the columns that are categorical and that are not needed for the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop unnecessary columns\n",
    "GB_for_group = GB.drop(a,axis=1) #drops the list from GB which is defined in the append of good and bad. axis =1 is the columns\n",
    "#GB_for_group #should give the new number of columns after dropping the variables in the list \"a\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create the frequency table by grabbing the frequency column from the table GB. This should be the same number as the append\n",
    "frequency = GB['Frequency']\n",
    "#frequency #will give the freq for each row in the GB table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Partition Node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data partition\n",
    "y = pd.get_dummies(GB[\"TARGET_GB_NEW\"]) #converts categorical variable (target) into dummy/indicator variables such as zero and one. The G_B becomes two columns (Good and Bad)\n",
    "y_Good = y[\"GOOD\"] #target. Good is 1 and bad is 0\n",
    "X_train, X_test, y_train, y_test = train_test_split(GB_for_group, y_Good, random_state = 12345, test_size=0.2) #2609\n",
    "#X_train, X_test, y_train, y_test = train_test_split(all columns except target G_B, target column, random_state (random seed), test_size (or can use train_size))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_train #(training data)\n",
    "#y_train #(training data target variable only)\n",
    "#X_test #(test data)\n",
    "#y_test #(test data target variable only)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Interactive Grouping Node - Before"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create quartile_cut function\n",
    "def quartile_cut(temp_not_missing, frequency, m):\n",
    "    t_name = temp_not_missing.name #column name\n",
    "    a = temp_not_missing.copy() #copy the dataframe. Note this \"a\" is not the same \"a\" from above\n",
    "    a = pd.concat([a,frequency],join='inner',axis=1) #combine the column with the frequency column\n",
    "    a = a.sort_values(by = t_name) #sorts the column name from smallest to largest\n",
    "    a['cumulative sum'] = a[frequency.name].cumsum() #calculates the cumulative sum of the frequency\n",
    "    interval = (a['cumulative sum'].max()+0.05)/m #find the max of the cumulative sum and adds 0.5 to it and then divides it by m which is the number of buckets\n",
    "    b = {'Bucket_#':[],'Bucket_max':[]} #emtpy lists\n",
    "    for i in range(1,m+1): #the list will only start at 1 and end at m. It will not include m+1\n",
    "        b['Bucket_#'].append(i) #b will keep getting appended with just the values of i. \n",
    "        b['Bucket_max'].append(a.loc[a['cumulative sum'] <= i*interval, t_name].max()) #this will check the max for each interval. Example, interval 1 for FICO can only go up to FICO score 418\n",
    "    c = pd.DataFrame(b) #creates the data fram with bucket number and the bucket max for each bucket number\n",
    "    c['Bucket_max'] = c['Bucket_max'].fillna(a[t_name].min()) #if the row is blank for a column then just include it in the minimum bin\n",
    "    temp_not_missing = pd.concat([temp_not_missing,frequency],join='inner',axis=1) #combines column name with frequency\n",
    "    temp_not_missing = temp_not_missing.reset_index() #reset the index of the dataframe \n",
    "    temp_not_missing = temp_not_missing.sort_values(by = t_name) #sorts it by small to large by column name\n",
    "    temp_not_missing[t_name] = temp_not_missing[t_name].astype('float64') #they all have the same data type\n",
    "    c['Bucket_max'] = c['Bucket_max'].astype('float64') #they all have the same data type\n",
    "    if len(temp_not_missing) == 0: #if temp_not_missing includes nothing print variable name includes Nan only\n",
    "        print(t_name + ' are all Nan')\n",
    "    else: \n",
    "        d = pd.merge_asof(temp_not_missing, \\\n",
    "        c.sort_values('Bucket_max'), \\\n",
    "        left_on = t_name, right_on = 'Bucket_max',direction = 'forward').set_index('index')\n",
    "    return d['Bucket_#']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# interactive grouping with decision tree(*means new)\n",
    "def interactive_grouping2(X_train, y_train, frequency,n=5, reject_level=0.02): #(n is the maximum number of bins)\n",
    "    X_train['useless_column'] = 1 #add a useless_column that will be used in decision tree*\n",
    "    columns_name = X_train.columns  #gives the column name for the training data only\n",
    "    y_name = y_train.name #gives the column name \"GOOD\". This variable is found in the data partition code\n",
    "    freq_name = frequency.name #gives the column name \"Frequency\".\n",
    "    group_dictionary={} #creates an empty dictionary\n",
    "    IV_dictionary = {} #creates an empty dictionary\n",
    "    for i in range(len(columns_name)-1):\n",
    "        temp_not_missing = X_train.loc[X_train[columns_name[i]].notnull(), [columns_name[i],'useless_column']] #makes the columns no longer null\n",
    "        not_missing_with_y = pd.concat([temp_not_missing,y_train],join='inner',axis=1) #add a new column (the train target variable) and if good then 1 or 0 if bad\n",
    "        not_missing_with_y_fre = pd.concat([not_missing_with_y,frequency],join='inner',axis=1) #add a new column (frequency)\n",
    "        not_missing_with_y_fre[\"freq*Good\"] = not_missing_with_y_fre[freq_name]*not_missing_with_y_fre[y_name] #multiplies  frequency by the value of good (either 1 or 0). for calculating Good event rate \n",
    "        temp_missing = X_train.loc[X_train[columns_name[i]].isnull(), columns_name[i]] #split rows with Nan value out\n",
    "        missing_with_y = pd.concat([temp_missing,y_train],join='inner',axis=1)\n",
    "        missing_with_y_fre = pd.concat([missing_with_y,frequency],join='inner',axis=1)\n",
    "        missing_with_y_fre[\"freq*Good\"] = missing_with_y_fre[freq_name]*missing_with_y_fre[y_name]\n",
    "        r = 0 #this is to reset the while loop when starting a variable i.e it will do FICO then in order to do cc2_ad we want everything to reset\n",
    "        p = 0 #this is to reset the while loop when starting a variable i.e it will do FICO then in order to do cc2_ad we want everything to reset\n",
    "        u = 0 #this is to reset the while loop when starting a variable i.e it will do FICO then in order to do cc2_ad we want everything to reset\n",
    "        m = n # this is to reset m\n",
    "    # X = temp_missing, monotonic event rate grouping\n",
    "        if len(not_missing_with_y_fre) > 0: #if not_missing_with_y_fre has record\n",
    "            while (np.abs(r) < 0.9 or u <= 100) and m >= 1: #stop until (spearman correlation great than 0.9 and smallest bin has records more than 150) or m = 0\n",
    "                not_missing_with_y_fre[\"Bucket1\"] = quartile_cut(not_missing_with_y_fre[columns_name[i]],frequency, 20) #quartile function from above. This will create a new variable called Bucket which is the bucket interval from quartile cut\n",
    "                if m > 1:\n",
    "                    clf = tree.DecisionTreeClassifier(random_state = 0, max_leaf_nodes = m, min_weight_fraction_leaf = 0.045) # *set decision tree parameters (max_leaf_nodes: max number of bins,min_weight_fraction_leaf: min sample % for each bins)*\n",
    "                    clf = clf.fit(not_missing_with_y_fre[[\"Bucket1\",'useless_column']], not_missing_with_y_fre[y_name], not_missing_with_y_fre[freq_name].values) # *fit not_missing_with_y_fre*\n",
    "                    not_missing_with_y_fre[\"Bucket\"] = clf.apply(not_missing_with_y_fre[[\"Bucket1\",'useless_column']]) # *find bin number for each records*\n",
    "                    d2 = not_missing_with_y_fre.groupby('Bucket', as_index = True) #group by function. group by bucket from above\n",
    "                    r, p = stats.spearmanr(d2[columns_name[i]].mean(), d2[\"freq*Good\"].sum()/d2[freq_name].sum()) #find the average for the column name in the training data, sum of the good event rate and divides it by the sum of the frequency then calculate spearman correlation\n",
    "                    u = d2[y_name].count().min() #returns the count and minimum of the column that gives the output good.\n",
    "                    m = m - 1\n",
    "                else: #if not_missing_with_y_fre doesn't have record\n",
    "                    not_missing_with_y_fre[\"Bucket\"] = 1\n",
    "                    d2 = not_missing_with_y_fre.groupby('Bucket', as_index = True)\n",
    "                    m = 0\n",
    "            d3 = pd.DataFrame(d2[columns_name[i]].min()) #creates a table\n",
    "            d3 = d3.rename(columns={columns_name[i]:'min_' + columns_name[i]}) #renames the column in above to mini_column name\n",
    "            d3['max_' + columns_name[i]] = d2[columns_name[i]].max() #creates the \"max_variable name\"\n",
    "            d3[y_name] = d2[\"freq*Good\"].sum() #sum of the good event rate\n",
    "            d3['total'] = d2[freq_name].sum() #create column called total which is the sum of the frequency \n",
    "            d3[y_name + '_rate'] = d3[y_name]/d3['total'] #creates a column for the good rate which is the count of good divided by the total for each interval\n",
    "            d4 = (d3.sort_values(by = 'min_' + columns_name[i])).reset_index(drop = True) #sorts the \"min_variable name\" column\n",
    "            d4 = d4.dropna(subset=['min_' + columns_name[i]]) #drop row that have Nan for min_columns\n",
    "            d4 = d4.append({y_name:missing_with_y_fre[\"freq*Good\"].sum(), 'total':missing_with_y_fre[freq_name].sum() \\\n",
    "                , y_name + '_rate':missing_with_y_fre[\"freq*Good\"].sum()/missing_with_y_fre[freq_name].sum()},ignore_index=True)\n",
    "            d4 = d4.dropna(subset=[y_name + '_rate'])\n",
    "        else:\n",
    "            print(columns_name[i] + ' includes Nan only')\n",
    "            d4 = pd.DataFrame({y_name:[missing_with_y_fre[\"freq*Good\"].sum()], 'total':[missing_with_y_fre[freq_name].sum()] \\\n",
    "                        , y_name + '_rate':[missing_with_y_fre[\"freq*Good\"].sum()/missing_with_y_fre[freq_name].sum()]})\n",
    "        \n",
    "    # WOE, varified in excel\n",
    "        Total_Event = d4[y_name].sum() #sum of the event rate\n",
    "        Total_Nonevent = d4['total'].sum() - Total_Event #sum of the nonevent rate\n",
    "        d4['WOE'] = d4.apply(lambda x: np.log(((x[y_name]+0.5)/Total_Event)/((x['total']-x[y_name]+0.5)/Total_Nonevent)),axis=1) #WOE calculated\n",
    "        d4 = d4.dropna(subset=['WOE']) #drop row that have Nan for WOE\n",
    "        group_dictionary[columns_name[i]] = d4\n",
    "    # Information Value, varified in excel\n",
    "        IV_dictionary[columns_name[i]] = d4.apply(lambda x: ((x[y_name]/Total_Event)-((x['total']-x[y_name])/Total_Nonevent))*x['WOE'],axis=1).sum() #information value calculated\n",
    "    IV_table = pd.DataFrame(list(IV_dictionary.items()),columns=['Variable_Name','Information_Value']).sort_values('Information_Value', ascending=False) #creates table with variable name and the information value. It is ordered by large to small information value\n",
    "    # reject weak variables\n",
    "    IV_table[\"Reject_or_Accept\"] = IV_table.apply(lambda x: \"Accept\" if x['Information_Value']>=reject_level else \"reject\",axis=1) #mark all the reject variables if the information value is less than reject else mark accept\n",
    "    # remove rejected variables from train\n",
    "    Accept_List = IV_table.loc[IV_table[\"Reject_or_Accept\"] == \"Accept\", 'Variable_Name'].values.tolist() #creates a list of accepted variables\n",
    "    X = X_train[Accept_List] #training data for the accepted variables\n",
    "    \n",
    "    # convert real vaule to WOE\n",
    "    #X1 = X.fillna(X.min()-1).reset_index()\n",
    "    #columns = X.columns\n",
    "    #converted_X = X.copy()\n",
    "    #for i in range(len(columns)):   \n",
    "        #X1[columns[i]] = X1[columns[i]].astype('float64')\n",
    "        #X2 = pd.merge_asof(X1.sort_values(columns[i]), \\\n",
    "                        #group_dictionary[columns[i]].fillna(group_dictionary[columns[i]].min()-1).sort_values('min_' + columns[i]), \\\n",
    "                        #left_on = columns[i], right_on = 'min_' + columns[i])[['index','WOE']].set_index('index')\n",
    "        #converted_X[columns[i]] = X2['WOE']\n",
    "    return group_dictionary, Accept_List, IV_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert X_test\n",
    "\n",
    "def convert_X(X_test, Accept_List, group_dictionary):\n",
    "    X = X_test[Accept_List] #select variables with information value greater than 0.02\n",
    "    X1 = X.fillna(X.min()-200000).reset_index() # impute Nan with minimum value-100000\n",
    "    columns = X.columns #object\"columns\" incluses all column name\n",
    "    converted_X = X.copy() # copy X to converted_X\n",
    "    group_dictionary1 = copy.deepcopy(group_dictionary) # copy group_dictionary to group_dictionary1\n",
    "    for i in range(len(columns)): #convert original value to WOE based on group_dictionary1\n",
    "                X1[columns[i]] = X1[columns[i]].astype('float64')\n",
    "                group_dictionary1[columns[i]].loc[0,['min_' + columns[i]]] = group_dictionary1[columns[i]]['min_' + columns[i]].min()-100000\n",
    "                X2 = pd.merge_asof(X1.sort_values(columns[i]), \\\n",
    "                                    group_dictionary1[columns[i]].fillna(group_dictionary1[columns[i]].min()-300000).sort_values('min_' + columns[i]), \\\n",
    "                                    left_on = columns[i], right_on = 'min_' + columns[i])[['index','WOE']].set_index('index')\n",
    "                converted_X[columns[i]] = X2['WOE'] #save result to converted_X\n",
    "    return X, converted_X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "purchaseactivitycount includes Nan only\n",
      "purchaseactivitydollartotal includes Nan only\n",
      "ALL9230 includes Nan only\n",
      "ALL9239 includes Nan only\n",
      "ALL9280 includes Nan only\n",
      "HLC5238 includes Nan only\n",
      "HLC5838 includes Nan only\n",
      "HLC7150 includes Nan only\n",
      "HLC7180 includes Nan only\n",
      "UTI8151 includes Nan only\n"
     ]
    }
   ],
   "source": [
    "# run the interactive grouping\n",
    "group_dictionary, Accept_List, IV_table = interactive_grouping2(X_train, y_train,frequency, n=5, reject_level=0.02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# regroup function\n",
    "# This function is for binning use.\n",
    "def regroup( group_dictionary, group_number=[0, 1, 2, 3, 4, 5], variable_name = 'crossindustry_score'):\n",
    "    pd_Series = pd.Series(group_number) #convert list to series\n",
    "    t = group_dictionary[variable_name].set_index(pd_Series) # reset the index\n",
    "    t1 = t.reset_index().groupby('index') # group by index\n",
    "    t2 = pd.DataFrame(t1['GOOD'].sum()) # sum 'GOOD' by index\n",
    "    t2['total'] = t1['total'].sum() # sum total by index\n",
    "    t2['GOOD_rate'] = t2['GOOD']/t2['total'] # recalculate good rate\n",
    "    Total_Event = group_dictionary[variable_name]['GOOD'].sum() # count total event\n",
    "    Total_Nonevent = group_dictionary[variable_name]['total'].sum() - Total_Event # count total nonevent\n",
    "    t2['WOE'] = t2.apply(lambda x: np.log(((x['GOOD']+0.5)/Total_Event)/((x['total']-x['GOOD']+0.5)/Total_Nonevent)),axis=1) #recalculate WOE\n",
    "    group_dictionary[variable_name] = t.drop(['GOOD_rate','WOE'],axis = 1).join(t2[['GOOD_rate','WOE']], how = 'left').reset_index(drop = True).sort_values(t.columns[0],ascending=True) # cover original GOOD_rate and WOE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#group example: regroup(group_dictionary, group_number=[0, 1, 2, 3, 4, 0], variable_name = 'crossindustry_score')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Outputs:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# group_dictionary['ALL7350'] # Group dictionary example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# IV_table # show information value table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# IV_table[IV_table['Reject_or_Accept'] == 'Accept'].count() # Give the count number for Accepting variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scorecard Node - Before"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# run the convert X\n",
    "Original_X_train, Converted_X_train = convert_X(X_train, Accept_List, group_dictionary)\n",
    "Original_X_test, Converted_X_test = convert_X(X_test, Accept_List, group_dictionary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# find the frequency for train data and test data\n",
    "y_train_freq = pd.concat([y_train,frequency],join='inner',axis=1)['Frequency']\n",
    "y_test_freq = pd.concat([y_test,frequency],join='inner',axis=1)['Frequency']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# variable selection by using lasso regression\n",
    "# drop_list is used when there is wrong trend variable in the logistic regression step otherwise it should be a EMPTY list\n",
    "\n",
    "drop_list = []\n",
    "N = 15 #number of variables\n",
    "Test_roc = [] #create a empty list for storing Test ROC\n",
    "Train_roc = [] #create a empty list for storing Train ROC\n",
    "Cs = np.logspace(-2, 0, num=30) #(select 20 numbers between 10^-2 and 10^4 )\n",
    "# for each C pick the N most important variables and use these vairbles to rerun logistic regression. finally, calculate ROC for train and test.\n",
    "for C in Cs:\n",
    "    lr = LogisticRegression(penalty='l1',C = C, solver='saga',random_state = 1).fit(Converted_X_train.drop(drop_list,axis = 1), y_train,y_train_freq)\n",
    "    feature_importances = pd.DataFrame(lr.coef_.T,\n",
    "                                       index = Converted_X_train.drop(drop_list,axis = 1).columns,\n",
    "                                        columns=['importance']).sort_values('importance',ascending=False)\n",
    "    new_X_train=Converted_X_train[feature_importances.iloc[0:N,:].index.tolist()] #select the best N variables and create a new train dataset\n",
    "    new_X_test=Converted_X_test[feature_importances.iloc[0:N,:].index.tolist()] #select the best N variables and create a new test dataset\n",
    "    #force variables in\n",
    "    #new_X_train = Converted_X_train[['BCC2306','RTA2306']]\n",
    "    #new_X_test = Converted_X_test[['BCC2306','RTA2306']]\n",
    "    lr = LogisticRegression().fit(new_X_train, y_train,y_train_freq) #run logistic regression\n",
    "    y_decision_fn_scores_auc = lr.decision_function(new_X_train) # calculate score (just like when we calculate Taprezoid ROC we need socre)\n",
    "    Train_roc.append(roc_auc_score(y_train, y_decision_fn_scores_auc, sample_weight = y_train_freq)) #calculate ROC and print it out\n",
    "    y_decision_fn_scores_auc = lr.decision_function(new_X_test)\n",
    "    Test_roc.append(roc_auc_score(y_test, y_decision_fn_scores_auc, sample_weight = y_test_freq))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          C     Train      Test\n",
      "2  0.013738  0.676765  0.648609\n",
      "           C     Train      Test\n",
      "0   0.010000  0.677515  0.645244\n",
      "1   0.011721  0.680092  0.646686\n",
      "2   0.013738  0.676765  0.648609\n",
      "3   0.016103  0.681082  0.645976\n",
      "4   0.018874  0.680210  0.636165\n",
      "5   0.022122  0.680210  0.636165\n",
      "6   0.025929  0.681560  0.640650\n",
      "7   0.030392  0.685120  0.633615\n",
      "8   0.035622  0.688775  0.630972\n",
      "9   0.041753  0.690104  0.624665\n",
      "10  0.048939  0.695355  0.638449\n",
      "11  0.057362  0.697944  0.639736\n",
      "12  0.067234  0.698952  0.637460\n",
      "13  0.078805  0.697938  0.634065\n",
      "14  0.092367  0.697804  0.632385\n",
      "15  0.108264  0.692991  0.621473\n",
      "16  0.126896  0.692991  0.621473\n",
      "17  0.148735  0.692781  0.635291\n",
      "18  0.174333  0.692781  0.635291\n",
      "19  0.204336  0.692781  0.635291\n",
      "20  0.239503  0.693935  0.636468\n",
      "21  0.280722  0.689559  0.623605\n",
      "22  0.329034  0.686005  0.623274\n",
      "23  0.385662  0.683451  0.621553\n",
      "24  0.452035  0.682556  0.626407\n",
      "25  0.529832  0.674052  0.621991\n",
      "26  0.621017  0.671903  0.627442\n",
      "27  0.727895  0.672111  0.628385\n",
      "28  0.853168  0.665895  0.615017\n",
      "29  1.000000  0.654065  0.617016\n"
     ]
    }
   ],
   "source": [
    "# plot train and test ROC (X: Cs the regulation varible, Y: ROC)\n",
    "ax = plt.gca()\n",
    "ax.set_xscale('log')\n",
    "ax.plot(Cs, Train_roc,'g', label = 'Train')\n",
    "ax.plot(Cs, Test_roc,'b', label = 'Test')\n",
    "#Set limits and titles\n",
    "plt.ylim([0.6,0.8]) # Y range\n",
    "plt.xlabel('Cs')\n",
    "plt.ylabel('AUC or ROC')\n",
    "plt.legend()\n",
    "plt.title('Tune regularization')\n",
    "plt.savefig('Tuning.png')\n",
    "plt.show()\n",
    "df = pd.DataFrame([Cs,Train_roc,Test_roc]).T.rename(columns={0:\"C\",1:\"Train\", 2:\"Test\"}) # save result in dataframe\n",
    "\n",
    "print(df[df[\"Test\"] == df[\"Test\"].max()]) #print out the C with highest Test ROC\n",
    "print(df) #print out all C, Train ROC score and Test ROC score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set AUC:  0.695354721814377\n",
      "Test set AUC:  0.6384487570227318\n",
      "                                coefficient\n",
      "inquirytelcom12month               0.728381\n",
      "COL5069                            0.721852\n",
      "CCA_CCA_INQ_90_DAYS                0.663593\n",
      "VANTAGE_V4_SCORE                   0.662900\n",
      "CCA_DSINCE_PRVBNKACCT_1ST_SEEN     0.658757\n",
      "AUT5930                            0.576187\n",
      "BCC7117                            0.478549\n",
      "ALL8271                            0.424762\n",
      "bankcard_score                     0.380445\n",
      "BCC3341                            0.378725\n",
      "crossindustry_score                0.336786\n",
      "ALL8270                            0.308709\n",
      "auto_score                         0.291252\n",
      "ALL4028                            0.253193\n",
      "ILN5238                            0.151327\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.36702674950613223"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# run logistic regression and print aout ROC and variables we use\n",
    "# Change C parameter in LogisticRegression, used the optimal one (Highest Test set ROC) from the previous step\n",
    "# Remove the wrong trend variable by adding the variable name into the drop.list in the previous step \n",
    "\n",
    "lr = LogisticRegression(penalty='l1',C =  0.048939 , solver='saga',random_state = 1).fit(Converted_X_train.drop(drop_list,axis = 1), y_train,y_train_freq) #run lasso logistic regression using best C\n",
    "feature_importances = pd.DataFrame(lr.coef_.T,\n",
    "                                       index = Converted_X_train.drop(drop_list,axis = 1).columns,\n",
    "                                        columns=['importance']).sort_values('importance',ascending=False) # create a datafrme to save feature importance\n",
    "new_X_train=Converted_X_train[feature_importances.iloc[0:N,:].index.tolist()] #select the best N variables and create a new train dataset\n",
    "new_X_test=Converted_X_test[feature_importances.iloc[0:N,:].index.tolist()] #select the best N variables and create a new test dataset\n",
    "lr = LogisticRegression().fit(new_X_train, y_train,y_train_freq) #run the logistic\n",
    "y_decision_fn_scores_auc = lr.decision_function(new_X_train) # calculate decision score (when we calculate Taprezoid ROC we need score) \n",
    "print('Train set AUC: ',roc_auc_score(y_train, y_decision_fn_scores_auc, sample_weight = y_train_freq)) #calculate ROC and print it out\n",
    "y_decision_fn_scores_auc = lr.decision_function(new_X_test)\n",
    "print('Test set AUC: ',roc_auc_score(y_test, y_decision_fn_scores_auc, sample_weight = y_test_freq))\n",
    "selected_feature = feature_importances.iloc[0:N,:].index.tolist() # select the best N variable's name and  and save them in list \n",
    "lr_coef = pd.DataFrame(lr.coef_.T, index = new_X_train.columns, columns=['coefficient']).sort_values('coefficient',ascending=False) # create a new dataframe to save variable name and coefficient\n",
    "print(lr_coef) #print variable coefficient\n",
    "lr.intercept_[0] #print out intercept"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate score\n",
    "scorecard_point ={}\n",
    "for i in lr_coef.index.tolist():\n",
    "    scorecard_point[i] = group_dictionary[i].copy()\n",
    "    scorecard_point[i]['score_point'] =  round((scorecard_point[i]['WOE']*lr_coef.loc[i][0]+lr.intercept_[0]/N)*28.8539008+200/N)\n",
    "# scorecard_point['crossindustry_score'] # uncomment for scorecard point example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# create scorecard table\n",
    "for i,j in zip(lr_coef.index.tolist(),range(len(lr_coef))):\n",
    "    if j == 0:\n",
    "        scorecard = scorecard_point[i].copy()\n",
    "        scorecard = scorecard.rename(columns={'min_' + i:'min','max_'+ i:'max'})\n",
    "        scorecard['variable'] = i\n",
    "        scorecard = scorecard.set_index('variable')\n",
    "        \n",
    "    else:\n",
    "        scorecard2 = scorecard_point[i].copy()\n",
    "        scorecard2 = scorecard2.rename(columns={'min_' + i:'min','max_'+ i:'max'})\n",
    "        scorecard2['variable'] = i\n",
    "        scorecard2 = scorecard2.set_index('variable')\n",
    "        scorecard = pd.concat([scorecard,scorecard2], ignore_index=False)\n",
    "scorecard_before = scorecard.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>GOOD</th>\n",
       "      <th>total</th>\n",
       "      <th>GOOD_rate</th>\n",
       "      <th>WOE</th>\n",
       "      <th>score_point</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>variable</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>inquirytelcom12month</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2401.751606</td>\n",
       "      <td>3948.751606</td>\n",
       "      <td>0.608231</td>\n",
       "      <td>0.079311</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>inquirytelcom12month</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>207.436831</td>\n",
       "      <td>470.436831</td>\n",
       "      <td>0.440945</td>\n",
       "      <td>-0.597274</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>inquirytelcom12month</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>47.978587</td>\n",
       "      <td>90.978587</td>\n",
       "      <td>0.527361</td>\n",
       "      <td>-0.252093</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COL5069</th>\n",
       "      <td>0.0</td>\n",
       "      <td>596.0</td>\n",
       "      <td>2087.068522</td>\n",
       "      <td>3382.068522</td>\n",
       "      <td>0.617098</td>\n",
       "      <td>0.116649</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COL5069</th>\n",
       "      <td>598.0</td>\n",
       "      <td>864.0</td>\n",
       "      <td>127.002141</td>\n",
       "      <td>227.002141</td>\n",
       "      <td>0.559476</td>\n",
       "      <td>-0.122479</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>COL5069</th>\n",
       "      <td>866.0</td>\n",
       "      <td>11003.0</td>\n",
       "      <td>443.096360</td>\n",
       "      <td>901.096360</td>\n",
       "      <td>0.491730</td>\n",
       "      <td>-0.393500</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CCA_CCA_INQ_90_DAYS</th>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2332.605996</td>\n",
       "      <td>3849.605996</td>\n",
       "      <td>0.605934</td>\n",
       "      <td>0.069682</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CCA_CCA_INQ_90_DAYS</th>\n",
       "      <td>9.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>230.014989</td>\n",
       "      <td>437.014989</td>\n",
       "      <td>0.526332</td>\n",
       "      <td>-0.255270</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CCA_CCA_INQ_90_DAYS</th>\n",
       "      <td>21.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>94.546039</td>\n",
       "      <td>223.546039</td>\n",
       "      <td>0.422938</td>\n",
       "      <td>-0.669774</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VANTAGE_V4_SCORE</th>\n",
       "      <td>300.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>465.674518</td>\n",
       "      <td>917.674518</td>\n",
       "      <td>0.507451</td>\n",
       "      <td>-0.330682</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VANTAGE_V4_SCORE</th>\n",
       "      <td>502.0</td>\n",
       "      <td>556.0</td>\n",
       "      <td>976.505353</td>\n",
       "      <td>1789.505353</td>\n",
       "      <td>0.545685</td>\n",
       "      <td>-0.177308</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VANTAGE_V4_SCORE</th>\n",
       "      <td>557.0</td>\n",
       "      <td>580.0</td>\n",
       "      <td>431.807281</td>\n",
       "      <td>682.807281</td>\n",
       "      <td>0.632400</td>\n",
       "      <td>0.181239</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VANTAGE_V4_SCORE</th>\n",
       "      <td>581.0</td>\n",
       "      <td>634.0</td>\n",
       "      <td>613.843683</td>\n",
       "      <td>900.843683</td>\n",
       "      <td>0.681410</td>\n",
       "      <td>0.398877</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VANTAGE_V4_SCORE</th>\n",
       "      <td>635.0</td>\n",
       "      <td>801.0</td>\n",
       "      <td>169.336188</td>\n",
       "      <td>219.336188</td>\n",
       "      <td>0.772039</td>\n",
       "      <td>0.852406</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CCA_DSINCE_PRVBNKACCT_1ST_SEEN</th>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>108.657388</td>\n",
       "      <td>231.657388</td>\n",
       "      <td>0.469043</td>\n",
       "      <td>-0.483905</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  min      max         GOOD        total  \\\n",
       "variable                                                                   \n",
       "inquirytelcom12month              0.0      0.0  2401.751606  3948.751606   \n",
       "inquirytelcom12month              1.0      1.0   207.436831   470.436831   \n",
       "inquirytelcom12month              NaN      NaN    47.978587    90.978587   \n",
       "COL5069                           0.0    596.0  2087.068522  3382.068522   \n",
       "COL5069                         598.0    864.0   127.002141   227.002141   \n",
       "COL5069                         866.0  11003.0   443.096360   901.096360   \n",
       "CCA_CCA_INQ_90_DAYS               0.0      8.0  2332.605996  3849.605996   \n",
       "CCA_CCA_INQ_90_DAYS               9.0     20.0   230.014989   437.014989   \n",
       "CCA_CCA_INQ_90_DAYS              21.0    165.0    94.546039   223.546039   \n",
       "VANTAGE_V4_SCORE                300.0    501.0   465.674518   917.674518   \n",
       "VANTAGE_V4_SCORE                502.0    556.0   976.505353  1789.505353   \n",
       "VANTAGE_V4_SCORE                557.0    580.0   431.807281   682.807281   \n",
       "VANTAGE_V4_SCORE                581.0    634.0   613.843683   900.843683   \n",
       "VANTAGE_V4_SCORE                635.0    801.0   169.336188   219.336188   \n",
       "CCA_DSINCE_PRVBNKACCT_1ST_SEEN    0.0     17.0   108.657388   231.657388   \n",
       "\n",
       "                                GOOD_rate       WOE  score_point  \n",
       "variable                                                          \n",
       "inquirytelcom12month             0.608231  0.079311         16.0  \n",
       "inquirytelcom12month             0.440945 -0.597274          1.0  \n",
       "inquirytelcom12month             0.527361 -0.252093          9.0  \n",
       "COL5069                          0.617098  0.116649         16.0  \n",
       "COL5069                          0.559476 -0.122479         11.0  \n",
       "COL5069                          0.491730 -0.393500          6.0  \n",
       "CCA_CCA_INQ_90_DAYS              0.605934  0.069682         15.0  \n",
       "CCA_CCA_INQ_90_DAYS              0.526332 -0.255270          9.0  \n",
       "CCA_CCA_INQ_90_DAYS              0.422938 -0.669774          1.0  \n",
       "VANTAGE_V4_SCORE                 0.507451 -0.330682          8.0  \n",
       "VANTAGE_V4_SCORE                 0.545685 -0.177308         11.0  \n",
       "VANTAGE_V4_SCORE                 0.632400  0.181239         18.0  \n",
       "VANTAGE_V4_SCORE                 0.681410  0.398877         22.0  \n",
       "VANTAGE_V4_SCORE                 0.772039  0.852406         30.0  \n",
       "CCA_DSINCE_PRVBNKACCT_1ST_SEEN   0.469043 -0.483905          5.0  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scorecard_before.head(15)  #Scorecard Sample"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import Node - Reject File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import rejected dataset\n",
    "rejected_db = pd.read_csv(r\"\\\\neptune\\RAD\\4 Models\\Scorecard 8.0_Redesign\\Modeling Data\\Valid Credit\\Clarity Hit\\With Inquiry\\Rejects_84459.csv\")\n",
    "#len(rejected_db)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sample Node - Reject File "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample to : 4670\n"
     ]
    }
   ],
   "source": [
    "# sample rejected dataset down\n",
    "rejected_sampledown = rejected_db.sample(n=len(GB),random_state=1000)\n",
    "print(\"Sample to :\",len(rejected_sampledown))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# prepare data for reject inference\n",
    "#a.remove('Frequency')\n",
    "#a.remove('G_B')\n",
    "for i in ['Frequency','TARGET_GB']:\n",
    "    a.remove(i)\n",
    "rejected_droped = rejected_sampledown.drop(a,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "rejected_droped['useless_column'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# prepare data for reject inference\n",
    "GB_accept = GB_for_group.copy()\n",
    "GB_accept['GOOD'] = y['GOOD']\n",
    "GB_accept['Frequency'] = GB['Frequency']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# GB_accept.head(50) # Display sample of dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reject Inference Node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# createreject_inference_function\n",
    "\n",
    "def reject_inference(GB_accept, rejected_droped, model,selected_feature,group_dictionary,rejection_rate =0.7):\n",
    "    # Convert data\n",
    "    r_db, converted_r_db = convert_X(rejected_droped, selected_feature, group_dictionary)\n",
    "    \n",
    "    Assume_Good = rejected_droped.copy()\n",
    "    Assume_Good['Good_prob'] = rejection_rate/(1 - rejection_rate)/(len(rejected_droped)/GB_accept['Frequency'].sum())\n",
    "    Assume_Good['GOOD'] = 1 \n",
    "    Assume_Good['Frequency'] = Assume_Good['Good_prob']*model.predict_proba(converted_r_db)[:,1]\n",
    "    \n",
    "    Assume_Bad = rejected_droped.copy()\n",
    "    Assume_Bad['Good_prob'] = rejection_rate/(1 - rejection_rate)/(len(rejected_droped)/GB_accept['Frequency'].sum())\n",
    "    Assume_Bad['GOOD'] = 0\n",
    "    Assume_Bad['Frequency'] = Assume_Good['Good_prob']*model.predict_proba(converted_r_db)[:,0]\n",
    "    \n",
    "    Assume_GB = Assume_Good.append(Assume_Bad, ignore_index=True)\n",
    "    \n",
    "    Accept_Reject = GB_accept.reset_index().append(Assume_GB[GB_accept.columns.tolist()], ignore_index=True,sort=False)\n",
    "    return Accept_Reject"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# run reject inference function\n",
    "Accept_Reject= reject_inference(GB_accept, rejected_droped, lr,selected_feature, group_dictionary, rejection_rate =0.7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accept_Reject: 14010\n"
     ]
    }
   ],
   "source": [
    "print('Accept_Reject:', len(Accept_Reject)) # Length of Reject Inference"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Second Data Partition Node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# prepare data for training\n",
    "y_Good2=Accept_Reject[\"GOOD\"]\n",
    "Accept_Reject_index = Accept_Reject['index']\n",
    "Accept_Reject_freq = Accept_Reject['Frequency']\n",
    "Accept_Reject_noindex = Accept_Reject.drop(['index','GOOD'],axis=1)\n",
    "X_train2, X_test2, y_train2, y_test2 = train_test_split(Accept_Reject_noindex, y_Good2, random_state = 1234567, test_size=0.3)\n",
    "y_train_freq2 = X_train2['Frequency']\n",
    "y_test_freq2 = X_test2['Frequency']\n",
    "X_train2 = X_train2.drop(['Frequency'],axis = 1)\n",
    "X_test2 = X_test2.drop(['Frequency'],axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Interactive Grouping Node - After"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "purchaseactivitycount includes Nan only\n",
      "purchaseactivitydollartotal includes Nan only\n",
      "ALL9230 includes Nan only\n",
      "ALL9239 includes Nan only\n",
      "ALL9280 includes Nan only\n"
     ]
    }
   ],
   "source": [
    "# run interactive grouping again\n",
    "group_dictionary2, Accept_List2, IV_table2 = interactive_grouping2(X_train2, y_train2, Accept_Reject_freq, n=5, reject_level=0.02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group Dictionary Example\n",
    "# group_dictionary2['crossindustry_score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# show information value table\n",
    "# IV_table2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scorecard Node - After"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert test value to WOE\n",
    "Original_X_train2, Converted_X_train2 = convert_X(X_train2, Accept_List2, group_dictionary2)\n",
    "Original_X_test2, Converted_X_test2 = convert_X(X_test2, Accept_List2, group_dictionary2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# variable selection\n",
    "drop_list = []\n",
    "N2 = 15 # number of variables\n",
    "Test_roc = []\n",
    "Train_roc = []\n",
    "Cs = np.logspace(-3, 1, num=20)\n",
    "for C in Cs:\n",
    "    lr2 = LogisticRegression(penalty='l1', solver='saga',C = C).fit(Converted_X_train2.drop(drop_list,axis = 1), y_train2,y_train_freq2)\n",
    "    feature_importances2 = pd.DataFrame(lr2.coef_.T,\n",
    "                                       index = Converted_X_train2.drop(drop_list,axis = 1).columns,\n",
    "                                        columns=['importance']).sort_values('importance',ascending=False)\n",
    "    new_X_train2=Converted_X_train2[feature_importances2.iloc[0:N2,:].index.tolist()]\n",
    "    new_X_test2=Converted_X_test2[feature_importances2.iloc[0:N2,:].index.tolist()]\n",
    "    lr2 = LogisticRegression().fit(new_X_train2, y_train2,y_train_freq2)\n",
    "    y_decision_fn_scores_auc2 = lr2.decision_function(new_X_train2)\n",
    "    Train_roc.append(roc_auc_score(y_train2, y_decision_fn_scores_auc2, sample_weight = y_train_freq2))\n",
    "    y_decision_fn_scores_auc2 = lr2.decision_function(new_X_test2)\n",
    "    Test_roc.append(roc_auc_score(y_test2, y_decision_fn_scores_auc2, sample_weight = y_test_freq2))\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = plt.gca()\n",
    "ax.set_xscale('log')\n",
    "ax.plot(Cs, Train_roc,'g', label = 'Train')\n",
    "ax.plot(Cs, Test_roc,'b', label = 'Test')\n",
    "#Set limits and titles\n",
    "plt.ylim([0.6,0.8])\n",
    "plt.xlabel('Cs')\n",
    "plt.ylabel('AUC or ROC')\n",
    "plt.legend()\n",
    "plt.title('Tune regularization')\n",
    " \n",
    "plt.savefig('Tuning.png')\n",
    "plt.show()\n",
    "\n",
    "df2 = pd.DataFrame([Cs,Train_roc,Test_roc]).T.rename(columns={0:\"C\",1:\"Train\", 2:\"Test\"})\n",
    "print(df2[df2[\"Test\"] == df2[\"Test\"].max()])\n",
    "print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# run logistic regression\n",
    "lr2 = LogisticRegression(penalty='l1', solver='saga',C = 0.01833).fit(Converted_X_train2.drop(drop_list,axis = 1), y_train2,y_train_freq2)\n",
    "feature_importances2 = pd.DataFrame(lr2.coef_.T,\n",
    "                                       index = Converted_X_train2.drop(drop_list,axis = 1).columns,\n",
    "                                        columns=['importance']).sort_values('importance',ascending=False)\n",
    "new_X_train2=Converted_X_train2[feature_importances2.iloc[0:N2,:].index.tolist()]\n",
    "new_X_test2=Converted_X_test2[feature_importances2.iloc[0:N2,:].index.tolist()]\n",
    "lr2 = LogisticRegression().fit(new_X_train2, y_train2,y_train_freq2)\n",
    "y_decision_fn_scores_auc2 = lr2.decision_function(new_X_train2)\n",
    "print('Train set AUC: ',roc_auc_score(y_train2, y_decision_fn_scores_auc2, sample_weight = y_train_freq2))\n",
    "y_decision_fn_scores_auc2 = lr2.decision_function(new_X_test2)\n",
    "print('Test set AUC: ',roc_auc_score(y_test2, y_decision_fn_scores_auc2, sample_weight = y_test_freq2))\n",
    "lr_coef2 = pd.DataFrame(lr2.coef_.T, index = new_X_train2.columns, columns=['coefficient']).sort_values('coefficient',ascending=False)\n",
    "print(lr_coef2)\n",
    "lr2.intercept_[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate score\n",
    "scorecard_point ={}\n",
    "for i in lr_coef2.index.tolist():\n",
    "    scorecard_point[i] = group_dictionary2[i].copy()\n",
    "    scorecard_point[i]['score_point'] =  round((scorecard_point[i]['WOE']*lr_coef2.loc[i][0]+lr2.intercept_[0]/N2)*28.8539008+200/N2)\n",
    "# scorecard_point['crossindustry_score']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Score Node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# score function\n",
    "# the same as Convert_X function\n",
    "def score(db_original, Feature_List, scorecard_point):\n",
    "    db = db_original[Feature_List]\n",
    "    db1 = db.fillna(db.min()-200000).reset_index()\n",
    "    columns = db.columns\n",
    "    converted_db = db.copy()\n",
    "    scorecard_point1 = copy.deepcopy(scorecard_point)\n",
    "    for i in range(len(columns)):\n",
    "                db1[columns[i]] = db1[columns[i]].astype('float64')\n",
    "                scorecard_point1[columns[i]].loc[0,['min_' + columns[i]]] = scorecard_point[columns[i]]['min_' + columns[i]].min()-100000\n",
    "                db2 = pd.merge_asof(db1.sort_values(columns[i]), \\\n",
    "                                    scorecard_point1[columns[i]].fillna(scorecard_point1[columns[i]].min()-300000).sort_values('min_' + columns[i]), \\\n",
    "                                    left_on = columns[i], right_on = 'min_' + columns[i])[['index','score_point']].set_index('index')\n",
    "                converted_db[columns[i]] = db2['score_point']\n",
    "                converted_db['sum'] = converted_db[Feature_List].sum(axis = 1)\n",
    "    return converted_db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# run the score function to calculate score\n",
    "scored_db = score(db,lr_coef2.index.tolist(),scorecard_point)\n",
    "\n",
    "# scored_db # Scorecard output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add a new column 'score' to original dataset\n",
    "db['score'] = scored_db['sum']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# create scorecard table\n",
    "for i,j in zip(lr_coef2.index.tolist(),range(len(lr_coef2))):\n",
    "    if j == 0:\n",
    "        scorecard = scorecard_point[i].copy()\n",
    "        scorecard = scorecard.rename(columns={'min_' + i:'min','max_'+ i:'max'})\n",
    "        scorecard['variable'] = i\n",
    "        scorecard = scorecard.set_index('variable')\n",
    "        \n",
    "    else:\n",
    "        scorecard2 = scorecard_point[i].copy()\n",
    "        scorecard2 = scorecard2.rename(columns={'min_' + i:'min','max_'+ i:'max'})\n",
    "        scorecard2['variable'] = i\n",
    "        scorecard2 = scorecard2.set_index('variable')\n",
    "        scorecard = pd.concat([scorecard,scorecard2], ignore_index=False)\n",
    "# scorecard"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scorecard"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Stage 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Filter Node - Stage 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Stage 2\n",
    "#Filter out Good and Bad\n",
    "\n",
    "Stage2_Goods=db[db[\"TARGET_GB_NEW\"]==\"GOOD\"]  #we use two db because one db will give the count of the whole dataset\n",
    "Stage2_Bads=db[db[\"TARGET_GB_NEW\"]==\"BAD\"]\n",
    "Stage2_GB=Stage2_Goods.append(Stage2_Bads) #can do Good.append(Bad)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"append Good and Bad:\",len(Stage2_GB)) #GB #will give the dataset that has the good and bad appended"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Partition Node - Stage 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert Good and Bad to dummy variable\n",
    "Stage2_GB_y = pd.get_dummies(Stage2_GB[\"TARGET_GB_NEW\"]) #converts categorical variable (target) into dummy/indicator variables such as zero and one. The G_B becomes two columns (Good and Bad)\n",
    "Stage2_GB_y_Bad = Stage2_GB_y[\"BAD\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train and Test split\n",
    "# The column name need to manually input 'CASH_DOWNPCT','OPENINGBALANCE_PCT','PTI', 'NET_AFPCT', 'YRSATWORK', 'LTV', 'score'\n",
    "Stage2_X_train, Stage2_X_test, Stage2_y_train, Stage2_y_test = train_test_split(Stage2_GB[['CASH_DOWNPCT',\n",
    "                                                                                           'OPENINGBALANCE_PCT',\n",
    "                                                                                           'PTI',\n",
    "                                                                                           #'NET_AFPCT',\n",
    "                                                                                           #'YRSATWORK',\n",
    "                                                                                           #'LTV',\n",
    "                                                                                           'score']], Stage2_GB_y_Bad, random_state = 34, test_size=0.25) #2609"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regressoin Node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Stage2_GB[['CASH_DOWNPCT','OPENINGBALANCE_PCT','PTI','NET_AFPCT','YRSATWORK','LTV','score']].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run logistic Regression\n",
    "lr3 = LogisticRegression().fit(Stage2_X_train, Stage2_y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the wrong trend variables in the Data Parition Node - Stage 2 by commenting out the column names\n",
    "\n",
    "# Coefficient Trends\n",
    "# CASH_DOWNPCT: Coefficient should be negative. The higher the CASH_DOWNPCT, the lower the Bad Rate.\n",
    "# OPENINGBALANCE_PCT: Coefficient should be positive. The higher the OPENINGBALANCE_PCT, the higher the Bad Rate.\n",
    "# PTI: Coefficient should be positive. The higher the PTI, the higher the Bad Rate.\n",
    "# NET_AFPCT: Coefficient should be positive. The higher the NET_AFPCT, the higher the Bad Rate.\n",
    "# YRSATWORK: Coefficient should be negative. The higher the YRSATWORK, the lower the Bad Rate.\n",
    "# LTV: Coefficient should be positive. The higher the LTV, the higher the Bad Rate.\n",
    "# score: Coefficient should be negative. The higher the score, the lower the Bad Rate.\n",
    "\n",
    "y_decision_fn_scores_auc3 = lr3.decision_function(Stage2_X_train)\n",
    "print('Train set AUC: ',roc_auc_score(Stage2_y_train, y_decision_fn_scores_auc3))\n",
    "y_decision_fn_scores_auc3 = lr3.decision_function(Stage2_X_test)\n",
    "print('Test set AUC: ',roc_auc_score(Stage2_y_test, y_decision_fn_scores_auc3))\n",
    "lr_coef3 = pd.DataFrame(lr3.coef_.T, index = Stage2_X_train.columns, columns=['coefficient']).sort_values('coefficient',ascending=False)\n",
    "print(lr_coef3)\n",
    "lr3.intercept_[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate Bad Proba\n",
    "db['Bad_Proba'] = lr3.predict_proba(db[['score','PTI', 'CASH_DOWNPCT','OPENINGBALANCE_PCT']])[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "abc = IV_table2.set_index('Variable_Name').loc[new_X_train2.columns.tolist(),:].sort_values('Information_Value', ascending=False)\n",
    "abc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Export to Excel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# export result to excel\n",
    "# Need to change the file path\n",
    "output_path = r'\\\\neptune\\RAD\\9 Temp Hold\\Hao\\Scorecard Modeling Python_HC\\Segment F\\SegmentF_Python.xlsx'\n",
    "\n",
    "writer = pd.ExcelWriter(output_path)\n",
    "db.to_excel(writer,'Sheet1')\n",
    "scorecard.to_excel(writer,'Variables_after')\n",
    "scorecard_before.to_excel(writer,'Variables_before')\n",
    "abc.to_excel(writer,'Information_Values')\n",
    "writer.save()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Stage 1 results SAS vs Python - ROC Curve and Lift Chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Input the same file path as in the pd.ExcelWriter() function\n",
    "\n",
    "path1 = r\"\\\\neptune\\RAD\\9 Temp Hold\\Hao\\Scorecard Modeling Python_HC\\Segment F\\SegmentF_Python.xlsx\"\n",
    "path2 = r\"\\\\neptune\\RAD\\9 Temp Hold\\Hao\\Scorecard Modeling Python_HC\\Segment F\\Stage1_SAS.xlsx\"\n",
    "\n",
    "df1 = pd.read_excel(path1, sheet_name= 'Sheet1')\n",
    "df2 = pd.read_excel(path2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2[df2['TARGET_GB_NEW'] == 'INDET'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2[['LN_Key2', 'SCORECARD_POINTS']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final = pd.merge(df1, df2, on = 'LN_Key2', how = 'left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final.rename(columns={\n",
    "    'SCORECARD_POINTS': 'SAS_Stage1',\n",
    "    'score': 'Python_Stage1'\n",
    "}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function Definition. \n",
    "\n",
    "def roc_calc(df, target_name, *score_name):\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    \n",
    "    df[target_name] = df[target_name].str.upper()\n",
    "    df = df[(df[target_name] == 'GOOD') | (df[target_name] == 'BAD')]\n",
    "    \n",
    "    result = {}\n",
    "    for score in score_name:\n",
    "        piv = df.pivot_table(df,index=score,columns=target_name,aggfunc='size',fill_value=0)\n",
    "        if piv.index.max() <= 1:     # if it's second stage bad rate, sort from high to low\n",
    "            piv = piv.sort_index(ascending=False)\n",
    "        else:                        # if it's first stage score, sort from low to high\n",
    "            piv = piv.sort_index()\n",
    "        piv['Bad%'] = (piv.BAD.cumsum(axis=0))/(piv.BAD.sum())\n",
    "        piv['Good%'] = (piv.GOOD.cumsum(axis=0))/(piv.GOOD.sum())\n",
    "        roc = (piv['Good%'] - piv['Good%'].shift(1)) * (piv['Bad%'] + piv['Bad%'].shift(1))/2   \n",
    "        roc = sum(roc.replace(np.nan,0))        \n",
    "        result[score] = roc\n",
    "    result = pd.Series(result)\n",
    "    result.name = 'ROC'\n",
    "    return result\n",
    "    \n",
    "    \n",
    "def roc_plot(df, target_name, *score_name):\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import matplotlib.pyplot as plt\n",
    "    \n",
    "    df[target_name] = df[target_name].str.upper()\n",
    "    df = df[(df[target_name] == 'GOOD') | (df[target_name] == 'BAD')]\n",
    "    \n",
    "    fig = plt.figure(figsize=(6,6))\n",
    "    \n",
    "    roc_lst = []\n",
    "    \n",
    "    for score in score_name:\n",
    "        piv = df.pivot_table(df,index=score,columns=target_name,aggfunc='size',fill_value=0)\n",
    "        if piv.index.max() <= 1:     # if it's second stage bad rate, sort from high to low\n",
    "            piv = piv.sort_index(ascending=False)\n",
    "        else:                        # if it's first stage score, sort from low to high\n",
    "            piv = piv.sort_index()\n",
    "        piv['Bad%'] = (piv.BAD.cumsum(axis=0))/(piv.BAD.sum())\n",
    "        piv['Good%'] = (piv.GOOD.cumsum(axis=0))/(piv.GOOD.sum())\n",
    "        roc = (piv['Good%'] - piv['Good%'].shift(1)) * (piv['Bad%'] + piv['Bad%'].shift(1))/2   \n",
    "        roc = sum(roc.replace(np.nan,0)) *100  \n",
    "        roc_lst.append(roc)\n",
    "        \n",
    "        if len(roc_lst) == 1:\n",
    "            plt.plot(piv['Good%'], piv['Bad%'], lw=2, label = \"{}: {:.2f}%, Base\".format(score, roc))\n",
    "        else:\n",
    "            lift = 100* (roc - roc_lst[0])/roc_lst[0]\n",
    "            plt.plot(piv['Good%'], piv['Bad%'], lw=2, label = \"{}: {:.2f}%, Lift={:.2f}%\".format(score, roc,lift))\n",
    "        \n",
    "    plt.xlim(-0.1,1.1)\n",
    "    plt.ylim(-0.1,1.1)\n",
    "    plt.xlabel('Cumulative % of Goods')\n",
    "    plt.ylabel('Cumulative % of Bads')\n",
    "    plt.grid()\n",
    "    plt.title('ROC curve')\n",
    "    plt.legend(prop={'size':13}, bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "def lift(base_roc, new_roc):\n",
    "    return (new_roc-base_roc)/base_roc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = 'TARGET_GB_NEW'\n",
    "score1 = 'SAS_Stage1'\n",
    "score2 = 'Python_Stage1'\n",
    "\n",
    "roc_plot(df_final, target, score1, score2);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
