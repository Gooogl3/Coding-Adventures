{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "43cf7b78",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "# Files for upload\n",
    "File1 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\A.csv'\n",
    "File2 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\B.csv'\n",
    "File3 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\C.csv'\n",
    "File4 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\D.csv'\n",
    "File5 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\E.csv'\n",
    "File6 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\F.csv'\n",
    "File7 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\G.csv'\n",
    "File8 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\H.csv'\n",
    "File9 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\I.csv'\n",
    "File10 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\J.csv'\n",
    "File11 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\K.csv'\n",
    "File12 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\L.csv'\n",
    "File13 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\M.csv'\n",
    "File14 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\N.csv'\n",
    "File15 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0\\Temp Workspace\\JN\\Back to Date\\TQN_SC8 Data\\O.csv'\n",
    "\n",
    "\n",
    "# Reading our files\n",
    "A = pd.read_csv(File1)\n",
    "B = pd.read_csv(File2)\n",
    "C = pd.read_csv(File3)\n",
    "D = pd.read_csv(File4)\n",
    "E = pd.read_csv(File5)\n",
    "F = pd.read_csv(File6)\n",
    "G = pd.read_csv(File7)\n",
    "H = pd.read_csv(File8)\n",
    "I = pd.read_csv(File9)\n",
    "J = pd.read_csv(File10)\n",
    "K = pd.read_csv(File11)\n",
    "L = pd.read_csv(File12)\n",
    "M = pd.read_csv(File13)\n",
    "N = pd.read_csv(File14)\n",
    "O = pd.read_csv(File15)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d7670448",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating New Datas\n",
    "\n",
    "A_8 = A[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "B_8 = B[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "C_8 = C[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "D_8 = D[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "E_8 = E[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "F_8 = F[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "G_8 = G[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "H_8 = H[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "I_8 = I[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "J_8 = J[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "K_8 = K[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "L_8 = L[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "M_8 = M[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "N_8 = N[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n",
    "O_8 = O[['LN_Key2','Stage1','Stage2','TARGET_GB','Prediction for TARGET_GB']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "667d6d48",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(len(A_8.LN_Key2))\n",
    "print(len(B_8.LN_Key2))\n",
    "print(len(C_8.LN_Key2))\n",
    "print(len(D_8.LN_Key2))\n",
    "print(len(E_8.LN_Key2))\n",
    "print(len(F_8.LN_Key2))\n",
    "print(len(G_8.LN_Key2))\n",
    "print(len(H_8.LN_Key2))\n",
    "print(len(I_8.LN_Key2))\n",
    "print(len(J_8.LN_Key2))\n",
    "print(len(K_8.LN_Key2))\n",
    "print(len(L_8.LN_Key2))\n",
    "print(len(M_8.LN_Key2))\n",
    "print(len(N_8.LN_Key2))\n",
    "print(len(O_8.LN_Key2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52972d40",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Segment = []\n",
    "#for x in range(len(O_8.LN_Key2)):\n",
    "#        Segment.append(\"8O\")\n",
    "#O_8[\"Segment\"] = '8O' \n",
    "#O_8.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "834fa9a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-4-f2c994166d94>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  A_8[\"Segment\"] = '8A'\n",
      "<ipython-input-4-f2c994166d94>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  B_8[\"Segment\"] = '8B'\n",
      "<ipython-input-4-f2c994166d94>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  C_8[\"Segment\"] = '8C'\n",
      "<ipython-input-4-f2c994166d94>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  D_8[\"Segment\"] = '8D'\n",
      "<ipython-input-4-f2c994166d94>:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  E_8[\"Segment\"] = '8E'\n",
      "<ipython-input-4-f2c994166d94>:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  F_8[\"Segment\"] = '8F'\n",
      "<ipython-input-4-f2c994166d94>:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  G_8[\"Segment\"] = '8G'\n",
      "<ipython-input-4-f2c994166d94>:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  H_8[\"Segment\"] = '8H'\n",
      "<ipython-input-4-f2c994166d94>:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  I_8[\"Segment\"] = '8I'\n",
      "<ipython-input-4-f2c994166d94>:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  J_8[\"Segment\"] = '8J'\n",
      "<ipython-input-4-f2c994166d94>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  K_8[\"Segment\"] = '8K'\n",
      "<ipython-input-4-f2c994166d94>:12: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  L_8[\"Segment\"] = '8L'\n",
      "<ipython-input-4-f2c994166d94>:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  M_8[\"Segment\"] = '8M'\n",
      "<ipython-input-4-f2c994166d94>:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  N_8[\"Segment\"] = '8N'\n",
      "<ipython-input-4-f2c994166d94>:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  O_8[\"Segment\"] = '8O'\n"
     ]
    }
   ],
   "source": [
    "A_8[\"Segment\"] = '8A'\n",
    "B_8[\"Segment\"] = '8B'\n",
    "C_8[\"Segment\"] = '8C'\n",
    "D_8[\"Segment\"] = '8D'\n",
    "E_8[\"Segment\"] = '8E'\n",
    "F_8[\"Segment\"] = '8F'\n",
    "G_8[\"Segment\"] = '8G'\n",
    "H_8[\"Segment\"] = '8H'\n",
    "I_8[\"Segment\"] = '8I'\n",
    "J_8[\"Segment\"] = '8J'\n",
    "K_8[\"Segment\"] = '8K'\n",
    "L_8[\"Segment\"] = '8L'\n",
    "M_8[\"Segment\"] = '8M'\n",
    "N_8[\"Segment\"] = '8N'\n",
    "O_8[\"Segment\"] = '8O'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ba64464a",
   "metadata": {},
   "outputs": [],
   "source": [
    "frames = [A_8,B_8,C_8,D_8,E_8,F_8,G_8,H_8,I_8,J_8,K_8,L_8,M_8,N_8,O_8,]\n",
    "result = pd.concat(frames)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c6f5efbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LN_Key2</th>\n",
       "      <th>Stage1</th>\n",
       "      <th>Stage2</th>\n",
       "      <th>TARGET_GB</th>\n",
       "      <th>Prediction for TARGET_GB</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Segment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8A</th>\n",
       "      <td>4939</td>\n",
       "      <td>4939</td>\n",
       "      <td>4939</td>\n",
       "      <td>4939</td>\n",
       "      <td>4939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8B</th>\n",
       "      <td>8292</td>\n",
       "      <td>8292</td>\n",
       "      <td>8292</td>\n",
       "      <td>8292</td>\n",
       "      <td>8292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8C</th>\n",
       "      <td>5015</td>\n",
       "      <td>5015</td>\n",
       "      <td>5015</td>\n",
       "      <td>5015</td>\n",
       "      <td>5015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8D</th>\n",
       "      <td>3600</td>\n",
       "      <td>3600</td>\n",
       "      <td>3600</td>\n",
       "      <td>3600</td>\n",
       "      <td>3600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8E</th>\n",
       "      <td>4708</td>\n",
       "      <td>4708</td>\n",
       "      <td>4708</td>\n",
       "      <td>4708</td>\n",
       "      <td>4708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8F</th>\n",
       "      <td>10668</td>\n",
       "      <td>10668</td>\n",
       "      <td>10668</td>\n",
       "      <td>10668</td>\n",
       "      <td>10668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8G</th>\n",
       "      <td>5126</td>\n",
       "      <td>5126</td>\n",
       "      <td>5126</td>\n",
       "      <td>5126</td>\n",
       "      <td>5126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8H</th>\n",
       "      <td>3772</td>\n",
       "      <td>3772</td>\n",
       "      <td>3772</td>\n",
       "      <td>3772</td>\n",
       "      <td>3772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8I</th>\n",
       "      <td>3357</td>\n",
       "      <td>3357</td>\n",
       "      <td>3357</td>\n",
       "      <td>3357</td>\n",
       "      <td>3357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8J</th>\n",
       "      <td>2700</td>\n",
       "      <td>2700</td>\n",
       "      <td>2700</td>\n",
       "      <td>2700</td>\n",
       "      <td>2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8K</th>\n",
       "      <td>2890</td>\n",
       "      <td>2890</td>\n",
       "      <td>2890</td>\n",
       "      <td>2890</td>\n",
       "      <td>2890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8L</th>\n",
       "      <td>3559</td>\n",
       "      <td>3559</td>\n",
       "      <td>3559</td>\n",
       "      <td>3559</td>\n",
       "      <td>3559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8M</th>\n",
       "      <td>2209</td>\n",
       "      <td>2209</td>\n",
       "      <td>2209</td>\n",
       "      <td>2209</td>\n",
       "      <td>2209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8N</th>\n",
       "      <td>3368</td>\n",
       "      <td>3368</td>\n",
       "      <td>3368</td>\n",
       "      <td>3368</td>\n",
       "      <td>3368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8O</th>\n",
       "      <td>5136</td>\n",
       "      <td>5136</td>\n",
       "      <td>5136</td>\n",
       "      <td>5136</td>\n",
       "      <td>5136</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         LN_Key2  Stage1  Stage2  TARGET_GB  Prediction for TARGET_GB\n",
       "Segment                                                              \n",
       "8A          4939    4939    4939       4939                      4939\n",
       "8B          8292    8292    8292       8292                      8292\n",
       "8C          5015    5015    5015       5015                      5015\n",
       "8D          3600    3600    3600       3600                      3600\n",
       "8E          4708    4708    4708       4708                      4708\n",
       "8F         10668   10668   10668      10668                     10668\n",
       "8G          5126    5126    5126       5126                      5126\n",
       "8H          3772    3772    3772       3772                      3772\n",
       "8I          3357    3357    3357       3357                      3357\n",
       "8J          2700    2700    2700       2700                      2700\n",
       "8K          2890    2890    2890       2890                      2890\n",
       "8L          3559    3559    3559       3559                      3559\n",
       "8M          2209    2209    2209       2209                      2209\n",
       "8N          3368    3368    3368       3368                      3368\n",
       "8O          5136    5136    5136       5136                      5136"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.groupby('Segment').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8ea5f513",
   "metadata": {},
   "outputs": [],
   "source": [
    "result.to_csv(r'C:\\Users\\jni\\Desktop\\V8 Data.csv', index = False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
