{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "897c3bdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "from datetime import datetime\n",
    "import math\n",
    "\n",
    "# Files for upload\n",
    "path1 = r'C:\\Users\\jni\\Desktop\\SC80 Final Data.csv'\n",
    "\n",
    "df1 = pd.read_csv(path1)\n",
    "#df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a9afc8af",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Useful tools\n",
    "# Function to count the width of each bins \n",
    "def print_intervals(array):\n",
    "    last = 0\n",
    "    for index, edge in enumerate(array):\n",
    "        if index == 0:\n",
    "            last = edge\n",
    "            continue\n",
    "        print(f\"Interval {index}:\", round(edge - last, 3))\n",
    "        last = edge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d1278bfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Variable Definition\n",
    "Seg = \"8J\"\n",
    "Bin_num = 10\n",
    "Bin_count = [1,2,3,4,5,6,7,8,9,10]\n",
    "nam1 = \"Dev1819\"\n",
    "nam2 = \"Q12021\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f38915c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LN_Key2</th>\n",
       "      <th>SC80_Stage1</th>\n",
       "      <th>SC80_Stage2</th>\n",
       "      <th>Segment</th>\n",
       "      <th>Timeperiod</th>\n",
       "      <th>STA</th>\n",
       "      <th>CONTRACT_OPENDATE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>F1_00000694</td>\n",
       "      <td>191</td>\n",
       "      <td>0.738066</td>\n",
       "      <td>8J</td>\n",
       "      <td>Q12021</td>\n",
       "      <td>D</td>\n",
       "      <td>202103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>F1_00001073</td>\n",
       "      <td>207</td>\n",
       "      <td>0.461230</td>\n",
       "      <td>8J</td>\n",
       "      <td>Q12021</td>\n",
       "      <td>D</td>\n",
       "      <td>202103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>F1_00001083</td>\n",
       "      <td>203</td>\n",
       "      <td>0.619301</td>\n",
       "      <td>8J</td>\n",
       "      <td>Q12021</td>\n",
       "      <td>D</td>\n",
       "      <td>202103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286</th>\n",
       "      <td>F1_00002070</td>\n",
       "      <td>215</td>\n",
       "      <td>0.492771</td>\n",
       "      <td>8J</td>\n",
       "      <td>Q12021</td>\n",
       "      <td>D</td>\n",
       "      <td>202103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>450</th>\n",
       "      <td>F1_00002587</td>\n",
       "      <td>225</td>\n",
       "      <td>0.450444</td>\n",
       "      <td>8J</td>\n",
       "      <td>Q12021</td>\n",
       "      <td>D</td>\n",
       "      <td>202101</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         LN_Key2  SC80_Stage1  SC80_Stage2 Segment Timeperiod STA  \\\n",
       "39   F1_00000694          191     0.738066      8J     Q12021   D   \n",
       "185  F1_00001073          207     0.461230      8J     Q12021   D   \n",
       "231  F1_00001083          203     0.619301      8J     Q12021   D   \n",
       "286  F1_00002070          215     0.492771      8J     Q12021   D   \n",
       "450  F1_00002587          225     0.450444      8J     Q12021   D   \n",
       "\n",
       "     CONTRACT_OPENDATE  \n",
       "39              202103  \n",
       "185             202103  \n",
       "231             202103  \n",
       "286             202103  \n",
       "450             202101  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating sub-dataframes\n",
    "Dev_temp = df1[df1['Timeperiod'] == \"Dev1819\"]\n",
    "Q121_temp = df1[df1['Timeperiod'] == \"Q12021\"]\n",
    "\n",
    "Dev = Dev_temp[Dev_temp['Segment'] == Seg]\n",
    "Q121 = Q121_temp[Q121_temp['Segment'] == Seg]\n",
    "Q121.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "280de19a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-9-1d55f505ff75>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Dev['Interval'] = pd.qcut(Dev['SC80_Stage1'],  q = Bin_num, labels = Bin_count)\n"
     ]
    }
   ],
   "source": [
    "# Final Bins using our own index\n",
    "Dev['Interval'] = pd.qcut(Dev['SC80_Stage1'],  q = Bin_num, labels = Bin_count)\n",
    "\n",
    "# Used for creating the bin edges\n",
    "results, bins_edges = pd.qcut(Dev['SC80_Stage1'],  q = Bin_num, precision = 0, retbins=True)\n",
    "\n",
    "# Use for checking the values\n",
    "# Printing the bin edges and intervals\n",
    "\n",
    "#print(bins_edges) \n",
    "#print_intervals(bins_edges)\n",
    "#Dev['Interval'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6ab1bd7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(128.0, 179.0]    618\n",
      "(179.0, 189.0]    571\n",
      "(189.0, 197.0]    652\n",
      "(197.0, 204.0]    589\n",
      "(204.0, 209.0]    508\n",
      "(209.0, 215.0]    612\n",
      "(215.0, 221.0]    571\n",
      "(221.0, 228.0]    595\n",
      "(228.0, 237.0]    573\n",
      "(237.0, 265.0]    571\n",
      "Name: SC80_Stage1, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Checking the bin's count\n",
    "temp = pd.qcut(Dev['SC80_Stage1'],  q = Bin_num,precision = 0)\n",
    "temp = temp.value_counts()\n",
    "temp = temp.sort_index()\n",
    "print(temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1ba352da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dev1819</th>\n",
       "      <th>Dev1819%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>652</td>\n",
       "      <td>0.111263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>618</td>\n",
       "      <td>0.105461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>612</td>\n",
       "      <td>0.104437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>595</td>\n",
       "      <td>0.101536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>589</td>\n",
       "      <td>0.100512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>573</td>\n",
       "      <td>0.097782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>571</td>\n",
       "      <td>0.097440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>571</td>\n",
       "      <td>0.097440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>571</td>\n",
       "      <td>0.097440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>508</td>\n",
       "      <td>0.086689</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Dev1819  Dev1819%\n",
       "3       652  0.111263\n",
       "1       618  0.105461\n",
       "6       612  0.104437\n",
       "8       595  0.101536\n",
       "4       589  0.100512\n",
       "9       573  0.097782\n",
       "2       571  0.097440\n",
       "7       571  0.097440\n",
       "10      571  0.097440\n",
       "5       508  0.086689"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displaying Each Bin count and percentage\n",
    "Final1 = []\n",
    "Final1 = Dev['Interval'].value_counts()\n",
    "Final1 = Final1.to_frame() \n",
    "Final1.columns = [ nam1 ]\n",
    "Final1[nam1+\"%\"] = (Final1[nam1] / Final1[nam1].sum())\n",
    "Final1 =Final1.sort_index(axis=1)\n",
    "Final1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2bacca97",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-12-816fb57c047a>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Q121['binned'] = pd.cut(Q121['SC80_Stage1'], bins=bins, labels=labels)\n"
     ]
    }
   ],
   "source": [
    "# Creating Bins\n",
    "bins = bins_edges # This is using bins created from above\n",
    "labels = [1,2,3,4,5,6,7,8,9,10]\n",
    "Q121['binned'] = pd.cut(Q121['SC80_Stage1'], bins=bins, labels=labels)\n",
    "\n",
    "# Display the count after the bins\n",
    "#121['binned'].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "45e941ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q12021</th>\n",
       "      <th>Q12021%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>293</td>\n",
       "      <td>0.160284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>273</td>\n",
       "      <td>0.149344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>232</td>\n",
       "      <td>0.126915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>211</td>\n",
       "      <td>0.115427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>194</td>\n",
       "      <td>0.106127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>193</td>\n",
       "      <td>0.105580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>135</td>\n",
       "      <td>0.073851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>134</td>\n",
       "      <td>0.073304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>89</td>\n",
       "      <td>0.048687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>74</td>\n",
       "      <td>0.040481</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Q12021   Q12021%\n",
       "10     293  0.160284\n",
       "9      273  0.149344\n",
       "8      232  0.126915\n",
       "4      211  0.115427\n",
       "6      194  0.106127\n",
       "7      193  0.105580\n",
       "3      135  0.073851\n",
       "5      134  0.073304\n",
       "2       89  0.048687\n",
       "1       74  0.040481"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displaying Each Bin count and percentage\n",
    "Final2 = []\n",
    "Final2 = Q121['binned'].value_counts()\n",
    "Final2 = Final2.to_frame() \n",
    "Final2.columns = [ nam2 ]\n",
    "Final2[nam2+\"%\"] = (Final2[nam2] / Final2[nam2].sum())\n",
    "Final2 =Final2.sort_index(axis=1)\n",
    "Final2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a4927161",
   "metadata": {},
   "outputs": [],
   "source": [
    "Final = pd.concat([Final1, Final2.reindex(Final1.index)], axis=1)\n",
    "Final = Final.sort_index() # This is used for rearranging the Bins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e4743947",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dev1819</th>\n",
       "      <th>Dev1819%</th>\n",
       "      <th>Q12021</th>\n",
       "      <th>Q12021%</th>\n",
       "      <th>Diff</th>\n",
       "      <th>WOE</th>\n",
       "      <th>IV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>618</td>\n",
       "      <td>0.105461</td>\n",
       "      <td>74</td>\n",
       "      <td>0.040481</td>\n",
       "      <td>-0.064979</td>\n",
       "      <td>-0.957496</td>\n",
       "      <td>0.062217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>571</td>\n",
       "      <td>0.097440</td>\n",
       "      <td>89</td>\n",
       "      <td>0.048687</td>\n",
       "      <td>-0.048753</td>\n",
       "      <td>-0.693826</td>\n",
       "      <td>0.033826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>652</td>\n",
       "      <td>0.111263</td>\n",
       "      <td>135</td>\n",
       "      <td>0.073851</td>\n",
       "      <td>-0.037412</td>\n",
       "      <td>-0.409843</td>\n",
       "      <td>0.015333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>589</td>\n",
       "      <td>0.100512</td>\n",
       "      <td>211</td>\n",
       "      <td>0.115427</td>\n",
       "      <td>0.014915</td>\n",
       "      <td>0.138359</td>\n",
       "      <td>0.002064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>508</td>\n",
       "      <td>0.086689</td>\n",
       "      <td>134</td>\n",
       "      <td>0.073304</td>\n",
       "      <td>-0.013385</td>\n",
       "      <td>-0.167715</td>\n",
       "      <td>0.002245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>612</td>\n",
       "      <td>0.104437</td>\n",
       "      <td>194</td>\n",
       "      <td>0.106127</td>\n",
       "      <td>0.001690</td>\n",
       "      <td>0.016053</td>\n",
       "      <td>0.000027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>571</td>\n",
       "      <td>0.097440</td>\n",
       "      <td>193</td>\n",
       "      <td>0.105580</td>\n",
       "      <td>0.008140</td>\n",
       "      <td>0.080228</td>\n",
       "      <td>0.000653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>595</td>\n",
       "      <td>0.101536</td>\n",
       "      <td>232</td>\n",
       "      <td>0.126915</td>\n",
       "      <td>0.025379</td>\n",
       "      <td>0.223103</td>\n",
       "      <td>0.005662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>573</td>\n",
       "      <td>0.097782</td>\n",
       "      <td>273</td>\n",
       "      <td>0.149344</td>\n",
       "      <td>0.051562</td>\n",
       "      <td>0.423513</td>\n",
       "      <td>0.021837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>571</td>\n",
       "      <td>0.097440</td>\n",
       "      <td>293</td>\n",
       "      <td>0.160284</td>\n",
       "      <td>0.062844</td>\n",
       "      <td>0.497711</td>\n",
       "      <td>0.031278</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Dev1819  Dev1819%  Q12021   Q12021%      Diff       WOE        IV\n",
       "1       618  0.105461      74  0.040481 -0.064979 -0.957496  0.062217\n",
       "2       571  0.097440      89  0.048687 -0.048753 -0.693826  0.033826\n",
       "3       652  0.111263     135  0.073851 -0.037412 -0.409843  0.015333\n",
       "4       589  0.100512     211  0.115427  0.014915  0.138359  0.002064\n",
       "5       508  0.086689     134  0.073304 -0.013385 -0.167715  0.002245\n",
       "6       612  0.104437     194  0.106127  0.001690  0.016053  0.000027\n",
       "7       571  0.097440     193  0.105580  0.008140  0.080228  0.000653\n",
       "8       595  0.101536     232  0.126915  0.025379  0.223103  0.005662\n",
       "9       573  0.097782     273  0.149344  0.051562  0.423513  0.021837\n",
       "10      571  0.097440     293  0.160284  0.062844  0.497711  0.031278"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Final[\"Diff\"] = Final[nam2+\"%\"] - Final[nam1+\"%\"]\n",
    "Final[\"WOE\"] = np.log(Final[nam2+\"%\"] /Final[nam1+\"%\"])\n",
    "Final[\"IV\"] = Final[\"Diff\"] * Final[\"WOE\"]\n",
    "Final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "23f64255",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dev1819     5860.00\n",
       "Dev1819%       1.00\n",
       "Q12021      1828.00\n",
       "Q12021%        1.00\n",
       "Diff           0.00\n",
       "WOE           -0.85\n",
       "IV             0.18\n",
       "dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(Final.sum(),2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47320e05",
   "metadata": {},
   "source": [
    "# SQL Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7d9d4c77",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 8)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<tokenize>\"\u001b[1;36m, line \u001b[1;32m8\u001b[0m\n\u001b[1;33m    FROM [SC80_Modeling].[dbo].[SC80_Final_Results]\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "# SQL Code\n",
    "SELECT [LN_Key2]\n",
    "      ,[SC80_Stage1]\n",
    "      ,[SC80_Stage2]\n",
    "      ,[SC80_Segment] as Segment\n",
    "      ,[DataSource] as Timeperiod\n",
    "      ,[CONTRACT_OPENDATE]\n",
    "  FROM [SC80_Modeling].[dbo].[SC80_Final_Results]\n",
    "  where [CONTRACT_OPENDATE] in ('201801','201802','201803','201901','201902','201903','202101','202102','202103')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
