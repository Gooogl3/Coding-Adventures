{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b4b45c2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import pyodbc \n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdd57670",
   "metadata": {},
   "source": [
    "# SQL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "57f009f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting up a Connection\n",
    "con = pyodbc.connect('Trusted_Connection=yes',\n",
    "                     driver = '{SQL Server}',\n",
    "                     server = 'sqlrad', \n",
    "                     database = 'SC80_Modeling')\n",
    "\n",
    "cur = con.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "87309d81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Writing the SQL query\n",
    "CR = \"SELECT [DL_MASTER]\\\n",
    "      ,[BY1_SCORE]\\\n",
    "      ,[Buyer_1#s_SS#Cust_No]\\\n",
    "      ,[CONTRACT_OPENDATE]\\\n",
    "      ,[CHECK_DATE]\\\n",
    "      ,[DEL_DATE]\\\n",
    "      ,[STA]\\\n",
    "      ,[DEL_STA]\\\n",
    "FROM [MainDatabase_Current].[dbo].[CR]\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "833f6b24",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating Tables based off of Query\n",
    "cur.execute(CR)\n",
    "results_after = cur.fetchall()\n",
    "\n",
    "# SQL Tables\n",
    "df_SQL = pd.read_sql(CR, con)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "15ce0337",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DL_MASTER               2039790\n",
       "BY1_SCORE               2014302\n",
       "Buyer_1#s_SS#Cust_No    2038570\n",
       "CONTRACT_OPENDATE       2039786\n",
       "CHECK_DATE               322369\n",
       "DEL_DATE                  67509\n",
       "STA                     2039789\n",
       "DEL_STA                 2039786\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_SQL.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "108c15f5",
   "metadata": {},
   "source": [
    "# Excel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "962c7154",
   "metadata": {},
   "outputs": [],
   "source": [
    "path_Buyer_1 = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0_Redesign\\Temp\\JN\\I. SC80.3\\rejects_43513_Dropped.xlsx'\n",
    "\n",
    "path_Result = r'\\\\neptune\\RAD\\4 Models\\Scorecard 8.0_Redesign\\Temp\\JN\\I. SC80.3\\rejects_43513_Dropped.xlsx'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6ec7e647",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Buyer1 = pd.read_excel(path_Buyer_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "23b111f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LN_Key2</th>\n",
       "      <th>CASH_DOWNPCT</th>\n",
       "      <th>LTV</th>\n",
       "      <th>OPENINGBALANCE_PCT</th>\n",
       "      <th>PTI</th>\n",
       "      <th>NET_AFPCT</th>\n",
       "      <th>YRSATWORK</th>\n",
       "      <th>auto_score</th>\n",
       "      <th>bankcard_score</th>\n",
       "      <th>short_term_lending_score</th>\n",
       "      <th>...</th>\n",
       "      <th>CCA_NUM_LOANS_PAST_DUE</th>\n",
       "      <th>CCA_NUM_LOANS_PD_OFF</th>\n",
       "      <th>CCA_PERC_OF_LOANS_30D_PAST_DUE</th>\n",
       "      <th>CCA_PERC_OF_LOANS_60D_PAST_DUE</th>\n",
       "      <th>CCA_PERC_OF_LOANS_90D_PAST_DUE</th>\n",
       "      <th>CCA_RPT_NMI_PRV_SEEN</th>\n",
       "      <th>CCA_TOO_MANY_INQS</th>\n",
       "      <th>CCA_TOO_MANY_TRADELINES</th>\n",
       "      <th>CCA_WORST_PMT_RATING</th>\n",
       "      <th>TARGET_GB_NEW</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F1_00000009</td>\n",
       "      <td>53</td>\n",
       "      <td>68</td>\n",
       "      <td>84</td>\n",
       "      <td>10</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>694.0</td>\n",
       "      <td>739.0</td>\n",
       "      <td>583.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GOOD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F1_00000015</td>\n",
       "      <td>45</td>\n",
       "      <td>59</td>\n",
       "      <td>51</td>\n",
       "      <td>3</td>\n",
       "      <td>56</td>\n",
       "      <td>4</td>\n",
       "      <td>642.0</td>\n",
       "      <td>750.0</td>\n",
       "      <td>568.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GOOD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>F1_00000034</td>\n",
       "      <td>28</td>\n",
       "      <td>92</td>\n",
       "      <td>114</td>\n",
       "      <td>10</td>\n",
       "      <td>88</td>\n",
       "      <td>2</td>\n",
       "      <td>663.0</td>\n",
       "      <td>693.0</td>\n",
       "      <td>580.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GOOD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F1_00000050</td>\n",
       "      <td>22</td>\n",
       "      <td>106</td>\n",
       "      <td>156</td>\n",
       "      <td>18</td>\n",
       "      <td>106</td>\n",
       "      <td>0</td>\n",
       "      <td>641.0</td>\n",
       "      <td>721.0</td>\n",
       "      <td>577.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2100.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GOOD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>F1_00000054</td>\n",
       "      <td>22</td>\n",
       "      <td>112</td>\n",
       "      <td>148</td>\n",
       "      <td>13</td>\n",
       "      <td>105</td>\n",
       "      <td>0</td>\n",
       "      <td>655.0</td>\n",
       "      <td>744.0</td>\n",
       "      <td>595.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GOOD</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 2675 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       LN_Key2  CASH_DOWNPCT  LTV  OPENINGBALANCE_PCT  PTI  NET_AFPCT  \\\n",
       "0  F1_00000009            53   68                  84   10         64   \n",
       "1  F1_00000015            45   59                  51    3         56   \n",
       "2  F1_00000034            28   92                 114   10         88   \n",
       "3  F1_00000050            22  106                 156   18        106   \n",
       "4  F1_00000054            22  112                 148   13        105   \n",
       "\n",
       "   YRSATWORK  auto_score  bankcard_score  short_term_lending_score  ...  \\\n",
       "0          0       694.0           739.0                     583.0  ...   \n",
       "1          4       642.0           750.0                     568.0  ...   \n",
       "2          2       663.0           693.0                     580.0  ...   \n",
       "3          0       641.0           721.0                     577.0  ...   \n",
       "4          0       655.0           744.0                     595.0  ...   \n",
       "\n",
       "   CCA_NUM_LOANS_PAST_DUE  CCA_NUM_LOANS_PD_OFF  \\\n",
       "0                     0.0                   0.0   \n",
       "1                     0.0                   0.0   \n",
       "2                     0.0                   0.0   \n",
       "3                     0.0                   0.0   \n",
       "4                     0.0                   0.0   \n",
       "\n",
       "   CCA_PERC_OF_LOANS_30D_PAST_DUE  CCA_PERC_OF_LOANS_60D_PAST_DUE  \\\n",
       "0                             0.0                             0.0   \n",
       "1                             0.0                             0.0   \n",
       "2                             0.0                             0.0   \n",
       "3                             0.0                             0.0   \n",
       "4                             0.0                             0.0   \n",
       "\n",
       "   CCA_PERC_OF_LOANS_90D_PAST_DUE  CCA_RPT_NMI_PRV_SEEN  CCA_TOO_MANY_INQS  \\\n",
       "0                             0.0                3800.0                0.0   \n",
       "1                             0.0                5800.0                0.0   \n",
       "2                             0.0                3800.0                0.0   \n",
       "3                             0.0                2100.0                0.0   \n",
       "4                             0.0                1800.0                0.0   \n",
       "\n",
       "   CCA_TOO_MANY_TRADELINES  CCA_WORST_PMT_RATING  TARGET_GB_NEW  \n",
       "0                      0.0                   NaN           GOOD  \n",
       "1                      0.0                   NaN           GOOD  \n",
       "2                      0.0                   NaN           GOOD  \n",
       "3                      0.0                   NaN           GOOD  \n",
       "4                      0.0                   NaN           GOOD  \n",
       "\n",
       "[5 rows x 2675 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Buyer1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5138646c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LN_Key2                    43513\n",
       "CASH_DOWNPCT               43513\n",
       "LTV                        43513\n",
       "OPENINGBALANCE_PCT         43513\n",
       "PTI                        43513\n",
       "                           ...  \n",
       "CCA_RPT_NMI_PRV_SEEN       30885\n",
       "CCA_TOO_MANY_INQS          35708\n",
       "CCA_TOO_MANY_TRADELINES    35708\n",
       "CCA_WORST_PMT_RATING        4356\n",
       "TARGET_GB_NEW              43513\n",
       "Length: 2675, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Buyer1.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "51840212",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Buyer1 = df_Buyer1.drop(['ALJ5030',\n",
    "'ALJ5320',\n",
    "'ALJ5730',\n",
    "'ALJ5820',\n",
    "'ALJ5830',\n",
    "'ALL8723',\n",
    "'ALL9260',\n",
    "'AUA5020',\n",
    "'AUA5320',\n",
    "'AUA5420',\n",
    "'AUA5520',\n",
    "'AUA5820',\n",
    "'AUT5020',\n",
    "'AUT5120',\n",
    "'AUT5238',\n",
    "'AUT5320',\n",
    "'AUT5420',\n",
    "'AUT5620',\n",
    "'AUT5820',\n",
    "'AUT5838',\n",
    "'AUT5923',\n",
    "'AUT5926',\n",
    "'AUT5930',\n",
    "'AUT7110',\n",
    "'AUT8140',\n",
    "'BAX5020',\n",
    "'BAX5030',\n",
    "'BCA0401',\n",
    "'BCA5020',\n",
    "'BCA5030',\n",
    "'BCA6201',\n",
    "'BCC5020',\n",
    "'BCC5030',\n",
    "'BCC5120',\n",
    "'BCC5227',\n",
    "'BCC5228',\n",
    "'BCC5320',\n",
    "'BCC5420',\n",
    "'BCC5520',\n",
    "'BCC5620',\n",
    "'BCC5627',\n",
    "'BCC5820',\n",
    "'BCC5830',\n",
    "'BCC5930',\n",
    "'BCC7110',\n",
    "'BCC7117',\n",
    "'BCC7120',\n",
    "'BCC7130',\n",
    "'BCC7140',\n",
    "'BCC7147',\n",
    "'BCC7481',\n",
    "'BCC7482',\n",
    "'BCC7483',\n",
    "'BCC7610',\n",
    "'BCC7620',\n",
    "'BCC7700',\n",
    "'BCC7708',\n",
    "'BCC7800',\n",
    "'BCC7910',\n",
    "'BCC7911',\n",
    "'BCC8338',\n",
    "'BCX5020',\n",
    "'BCX5030',\n",
    "'BCX5320',\n",
    "'BCX5420',\n",
    "'BCX5830',\n",
    "'BCX7110',\n",
    "'BUS8122',\n",
    "'BUS8132',\n",
    "'HLC0401',\n",
    "'HLC2328',\n",
    "'HLC2358',\n",
    "'HLC2388',\n",
    "'HLC5122',\n",
    "'HLC5422',\n",
    "'HLC6201',\n",
    "'HLC8122',\n",
    "'HLC8132',\n",
    "'HLC8222',\n",
    "'ILN5020',\n",
    "'ILN5120',\n",
    "'ILN5220',\n",
    "'ILN5238',\n",
    "'ILN5320',\n",
    "'ILN5420',\n",
    "'ILN5520',\n",
    "'ILN5820',\n",
    "'ILN5838',\n",
    "'ILN5923',\n",
    "'ILN5926',\n",
    "'ILN5930',\n",
    "'ILN7110',\n",
    "'ILN7120',\n",
    "'ILN7130',\n",
    "'ILN7150',\n",
    "'ILN7313',\n",
    "'ILN8140',\n",
    "'MTA6210',\n",
    "'MTA6220',\n",
    "'MTA7436',\n",
    "'MTF1471',\n",
    "'MTF1472',\n",
    "'MTF2862',\n",
    "'MTF2933',\n",
    "'MTF2963',\n",
    "'MTF6281',\n",
    "'MTS2358',\n",
    "'MTS2388',\n",
    "'MTS4180',\n",
    "'MTS6280',\n",
    "'MTS8151',\n",
    "'RTA5030',\n",
    "'RTA5120',\n",
    "'RTA5320',\n",
    "'RTA5830',\n",
    "'RTA7110',\n",
    "'RTR5020',\n",
    "'RTR5030',\n",
    "'RTR5320',\n",
    "'RTR5420',\n",
    "'RTR5520',\n",
    "'RTR5620',\n",
    "'RTR5627',\n",
    "'RTR5830',\n",
    "'RTR5930',\n",
    "'RTR7110',\n",
    "'RTR7140'\n",
    "               ], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "93e46d53",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Buyer1.to_excel(path_Result, index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "593106b3",
   "metadata": {},
   "source": [
    "# Temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6ae7a7c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DEAL#                 84255\n",
       "VANTAGE_V4_SCORE      62754\n",
       "OPEN DATE             84255\n",
       "FICO                  62749\n",
       "BUYER 1's SSN         84255\n",
       "CROSSINDUSTRYSCORE    84039\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_temp = df_Buyer1[['DEAL#', 'VANTAGE_V4_SCORE', 'OPEN DATE','FICO', \"BUYER 1's SSN\",\"CROSSINDUSTRYSCORE\"]]\n",
    "df_temp.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "75539ca0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "84255"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = pd.concat([df_CR, df_temp], axis=1, join=\"inner\")\n",
    "result['DEAL#'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "cc9ebaef",
   "metadata": {},
   "outputs": [],
   "source": [
    "result.to_excel(path_Result, index = False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
