{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ROC Calculation and Plotting Functions\n",
    "\n",
    "Function <b>roc_calc</b> is to calculate ROC for one or multiple scores. \n",
    "* It takes the DataFrame, target column name (like ‘G_B’), and one or multiple score column names as input parameters. \n",
    "* The score can be either first stage score or second stage bad rate. The function can identify first or second stage by itself and calculate ROC accordingly. \n",
    "* Value of the target column must be GOOD/BAD/INDET. Upper or lower case doesn’t matter. \n",
    "* The function returns a Series of ROC for all score(s) that we passed in, with score name(s) as index name(s).\n",
    "* The function can be combined with $groupby$ to calculate ROC within each subpopulation. \n",
    "\n",
    "Function <b>roc_plot</b> is to plot roc curve(s) for one or multiple scores.\n",
    "* Just like roc_calc, roc_plot takes the DataFrame, target column name (like ‘G_B’), and one or multiple score column name(s) as input parameters.\n",
    "* The Legend shows ROC value(s) and lift(s) of the score(s). The first score parameter we put in will be determined as the Base. Any scores we put in after will be compared to the Base and given a lift value. \n",
    "\n",
    "Function <b>lift</b> is to calculate the lift between two ROCs.\n",
    "* It takes 2 ROC values as input parameters. Whichever put in first is the base. \n",
    "* It calculates lift this way: (new_roc - base_roc) / base_roc.\n",
    "* The function returns a float."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function Definition. \n",
    "\n",
    "def roc_calc(df, target_name, *score_name):\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    \n",
    "    df[target_name] = df[target_name].str.upper()\n",
    "    df = df[(df[target_name] == 'GOOD') | (df[target_name] == 'BAD')]\n",
    "    \n",
    "    result = {}\n",
    "    for score in score_name:\n",
    "        piv = df.pivot_table(df,index=score,columns=target_name,aggfunc='size',fill_value=0)\n",
    "        if piv.index.max() <= 1:     # if it's second stage bad rate, sort from high to low\n",
    "            piv = piv.sort_index(ascending=False)\n",
    "        else:                        # if it's first stage score, sort from low to high\n",
    "            piv = piv.sort_index()\n",
    "        piv['Bad%'] = (piv.BAD.cumsum(axis=0))/(piv.BAD.sum())\n",
    "        piv['Good%'] = (piv.GOOD.cumsum(axis=0))/(piv.GOOD.sum())\n",
    "        roc = (piv['Good%'] - piv['Good%'].shift(1)) * (piv['Bad%'] + piv['Bad%'].shift(1))/2   \n",
    "        roc = sum(roc.replace(np.nan,0))        \n",
    "        result[score] = roc\n",
    "    result = pd.Series(result)\n",
    "    result.name = 'ROC'\n",
    "    return result\n",
    "    \n",
    "    \n",
    "def roc_plot(df, target_name, *score_name):\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import matplotlib.pyplot as plt\n",
    "    \n",
    "    df[target_name] = df[target_name].str.upper()\n",
    "    df = df[(df[target_name] == 'GOOD') | (df[target_name] == 'BAD')]\n",
    "    \n",
    "    fig = plt.figure(figsize=(6,6))\n",
    "    \n",
    "    roc_lst = []\n",
    "    \n",
    "    for score in score_name:\n",
    "        piv = df.pivot_table(df,index=score,columns=target_name,aggfunc='size',fill_value=0)\n",
    "        if piv.index.max() <= 1:     # if it's second stage bad rate, sort from high to low\n",
    "            piv = piv.sort_index(ascending=False)\n",
    "        else:                        # if it's first stage score, sort from low to high\n",
    "            piv = piv.sort_index()\n",
    "        piv['Bad%'] = (piv.BAD.cumsum(axis=0))/(piv.BAD.sum())\n",
    "        piv['Good%'] = (piv.GOOD.cumsum(axis=0))/(piv.GOOD.sum())\n",
    "        roc = (piv['Good%'] - piv['Good%'].shift(1)) * (piv['Bad%'] + piv['Bad%'].shift(1))/2   \n",
    "        roc = sum(roc.replace(np.nan,0)) *100  \n",
    "        roc_lst.append(roc)\n",
    "        \n",
    "        if len(roc_lst) == 1:\n",
    "            plt.plot(piv['Good%'], piv['Bad%'], lw=2, label = \"{}: {:.2f}%, Base\".format(score, roc))\n",
    "        else:\n",
    "            lift = 100* (roc - roc_lst[0])/roc_lst[0]\n",
    "            plt.plot(piv['Good%'], piv['Bad%'], lw=2, label = \"{}: {:.2f}%, Lift={:.2f}%\".format(score, roc,lift))\n",
    "        \n",
    "    plt.xlim(-0.1,1.1)\n",
    "    plt.ylim(-0.1,1.1)\n",
    "    plt.xlabel('Cumulative % of Goods')\n",
    "    plt.ylabel('Cumulative % of Bads')\n",
    "    plt.grid()\n",
    "    plt.title('ROC curve')\n",
    "    plt.legend(prop={'size':13}, bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "def lift(base_roc, new_roc):\n",
    "    return (new_roc-base_roc)/base_roc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LN_Key</th>\n",
       "      <th>A_R</th>\n",
       "      <th>SC70_Stage1_Points</th>\n",
       "      <th>SC70_Stage2_Points</th>\n",
       "      <th>SC70_Segment</th>\n",
       "      <th>SC60_Stage1_Points</th>\n",
       "      <th>SC60_Stage2_Points</th>\n",
       "      <th>SC60_Segment</th>\n",
       "      <th>Model_State</th>\n",
       "      <th>FICCLAV8_SCORE</th>\n",
       "      <th>...</th>\n",
       "      <th>CLOSE_DATE</th>\n",
       "      <th>OPEN_YEARMONTH</th>\n",
       "      <th>CLOSE_YEARMONTH</th>\n",
       "      <th>DR_ORIGBAL</th>\n",
       "      <th>GAIN</th>\n",
       "      <th>G_B</th>\n",
       "      <th>DAYS_LATE</th>\n",
       "      <th>PAIDMO</th>\n",
       "      <th>BAD_CLOSECODE_Indicator</th>\n",
       "      <th>TimePeriod</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>L008428</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>198</td>\n",
       "      <td>0.511509</td>\n",
       "      <td>7F</td>\n",
       "      <td>184</td>\n",
       "      <td>0.6447</td>\n",
       "      <td>6F</td>\n",
       "      <td>FL</td>\n",
       "      <td>477.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20180327.0</td>\n",
       "      <td>201708</td>\n",
       "      <td>201803.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>753.72</td>\n",
       "      <td>INDET</td>\n",
       "      <td>653</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>L025832</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>238</td>\n",
       "      <td>0.248504</td>\n",
       "      <td>7F</td>\n",
       "      <td>231</td>\n",
       "      <td>0.3312</td>\n",
       "      <td>6F</td>\n",
       "      <td>FL</td>\n",
       "      <td>608.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20180906.0</td>\n",
       "      <td>201702</td>\n",
       "      <td>201809.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4412.10</td>\n",
       "      <td>GOOD</td>\n",
       "      <td>460</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>L025651</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>239</td>\n",
       "      <td>0.323428</td>\n",
       "      <td>7D</td>\n",
       "      <td>231</td>\n",
       "      <td>0.3791</td>\n",
       "      <td>6D</td>\n",
       "      <td>CA</td>\n",
       "      <td>638.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20190304.0</td>\n",
       "      <td>201703</td>\n",
       "      <td>201903.0</td>\n",
       "      <td>9141.34</td>\n",
       "      <td>-3081.20</td>\n",
       "      <td>BAD</td>\n",
       "      <td>370</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>L025855</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>195</td>\n",
       "      <td>0.613916</td>\n",
       "      <td>7M</td>\n",
       "      <td>189</td>\n",
       "      <td>0.6429</td>\n",
       "      <td>6K</td>\n",
       "      <td>CA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>20171106.0</td>\n",
       "      <td>201608</td>\n",
       "      <td>201711.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2722.80</td>\n",
       "      <td>GOOD</td>\n",
       "      <td>576</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>L026313</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>228</td>\n",
       "      <td>0.303659</td>\n",
       "      <td>7D</td>\n",
       "      <td>225</td>\n",
       "      <td>0.3238</td>\n",
       "      <td>6D</td>\n",
       "      <td>CA</td>\n",
       "      <td>555.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>201701</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>893.86</td>\n",
       "      <td>GOOD</td>\n",
       "      <td>-18</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    LN_Key      A_R  SC70_Stage1_Points  SC70_Stage2_Points SC70_Segment  \\\n",
       "0  L008428  Accepts                 198            0.511509           7F   \n",
       "1  L025832  Accepts                 238            0.248504           7F   \n",
       "2  L025651  Accepts                 239            0.323428           7D   \n",
       "3  L025855  Accepts                 195            0.613916           7M   \n",
       "4  L026313  Accepts                 228            0.303659           7D   \n",
       "\n",
       "   SC60_Stage1_Points  SC60_Stage2_Points SC60_Segment Model_State  \\\n",
       "0                 184              0.6447           6F          FL   \n",
       "1                 231              0.3312           6F          FL   \n",
       "2                 231              0.3791           6D          CA   \n",
       "3                 189              0.6429           6K          CA   \n",
       "4                 225              0.3238           6D          CA   \n",
       "\n",
       "   FICCLAV8_SCORE  ...  CLOSE_DATE OPEN_YEARMONTH CLOSE_YEARMONTH DR_ORIGBAL  \\\n",
       "0           477.0  ...  20180327.0         201708        201803.0        NaN   \n",
       "1           608.0  ...  20180906.0         201702        201809.0        NaN   \n",
       "2           638.0  ...  20190304.0         201703        201903.0    9141.34   \n",
       "3             NaN  ...  20171106.0         201608        201711.0        NaN   \n",
       "4           555.0  ...         NaN         201701             NaN        NaN   \n",
       "\n",
       "      GAIN    G_B  DAYS_LATE  PAIDMO  BAD_CLOSECODE_Indicator  TimePeriod  \n",
       "0   753.72  INDET        653       4                        0         Dev  \n",
       "1  4412.10   GOOD        460      16                        0         Dev  \n",
       "2 -3081.20    BAD        370      19                        1         Dev  \n",
       "3  2722.80   GOOD        576      19                        0         Dev  \n",
       "4   893.86   GOOD        -18      33                        0         Dev  \n",
       "\n",
       "[5 rows x 44 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set up\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "    \n",
    "# Put in the path of the data file and column names inside of the apostrophe\n",
    "path = r'\\\\neptune\\RAD\\4 Models\\Scorecard 7.0\\Subpopulation Study\\Lift\\data prepare\\DEV\\Total.csv'\n",
    "target = 'G_B'\n",
    "score1 = 'SC60_Stage1_Points'\n",
    "score2 = 'SC70_Stage1_Points'\n",
    "score3 = 'SC60_Stage2_Points' \n",
    "score4 = 'SC70_Stage2_Points'\n",
    "#score5 = ...   # add more if you need\n",
    "\n",
    "# Load the data file\n",
    "df = pd.read_csv(path)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example 1: plot the ROC Curve for two scores\n",
    "\n",
    "roc_plot(df, target, score1, score2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SC60_Stage1_Points    0.697617\n",
       "Name: ROC, dtype: float64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Example 2: calculate ROC for one score\n",
    "result = roc_calc(df, target, score1)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SC60_Stage1_Points    0.697617\n",
       "SC70_Stage1_Points    0.711558\n",
       "Lift                  0.019984\n",
       "Name: ROC, dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Example 3: calculate ROC for two scores\n",
    "result = roc_calc(df, target, score1, score2)\n",
    "\n",
    "# Calculte the Lift between the two scores and add it into the result\n",
    "result['Lift'] = lift(result[score1], result[score2])\n",
    "\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>ROC</th>\n",
       "      <th>SC60_Stage1_Points</th>\n",
       "      <th>SC70_Stage1_Points</th>\n",
       "      <th>Lift</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SC70_Segment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7A</th>\n",
       "      <td>0.677731</td>\n",
       "      <td>0.706034</td>\n",
       "      <td>0.041761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7B</th>\n",
       "      <td>0.674665</td>\n",
       "      <td>0.694914</td>\n",
       "      <td>0.030014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7C</th>\n",
       "      <td>0.666813</td>\n",
       "      <td>0.692968</td>\n",
       "      <td>0.039223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7D</th>\n",
       "      <td>0.712364</td>\n",
       "      <td>0.717424</td>\n",
       "      <td>0.007103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7E</th>\n",
       "      <td>0.689806</td>\n",
       "      <td>0.704998</td>\n",
       "      <td>0.022024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7F</th>\n",
       "      <td>0.724936</td>\n",
       "      <td>0.727495</td>\n",
       "      <td>0.003529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7G</th>\n",
       "      <td>0.707950</td>\n",
       "      <td>0.735889</td>\n",
       "      <td>0.039464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7H</th>\n",
       "      <td>0.713438</td>\n",
       "      <td>0.730124</td>\n",
       "      <td>0.023388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7I</th>\n",
       "      <td>0.682888</td>\n",
       "      <td>0.687413</td>\n",
       "      <td>0.006626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7J</th>\n",
       "      <td>0.663899</td>\n",
       "      <td>0.666372</td>\n",
       "      <td>0.003725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7K</th>\n",
       "      <td>0.664344</td>\n",
       "      <td>0.673044</td>\n",
       "      <td>0.013095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7L</th>\n",
       "      <td>0.658276</td>\n",
       "      <td>0.682075</td>\n",
       "      <td>0.036153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7M</th>\n",
       "      <td>0.593959</td>\n",
       "      <td>0.601685</td>\n",
       "      <td>0.013007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7N</th>\n",
       "      <td>0.590231</td>\n",
       "      <td>0.586971</td>\n",
       "      <td>-0.005522</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "ROC           SC60_Stage1_Points  SC70_Stage1_Points      Lift\n",
       "SC70_Segment                                                  \n",
       "7A                      0.677731            0.706034  0.041761\n",
       "7B                      0.674665            0.694914  0.030014\n",
       "7C                      0.666813            0.692968  0.039223\n",
       "7D                      0.712364            0.717424  0.007103\n",
       "7E                      0.689806            0.704998  0.022024\n",
       "7F                      0.724936            0.727495  0.003529\n",
       "7G                      0.707950            0.735889  0.039464\n",
       "7H                      0.713438            0.730124  0.023388\n",
       "7I                      0.682888            0.687413  0.006626\n",
       "7J                      0.663899            0.666372  0.003725\n",
       "7K                      0.664344            0.673044  0.013095\n",
       "7L                      0.658276            0.682075  0.036153\n",
       "7M                      0.593959            0.601685  0.013007\n",
       "7N                      0.590231            0.586971 -0.005522"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Example 4: calculate ROC for two scores within each Segment\n",
    "result = df.groupby('SC70_Segment').apply(roc_calc, target, score1, score2)\n",
    "\n",
    "# Put in the Lift column\n",
    "result['Lift'] = np.vectorize(lift)(result[score1], result[score2])\n",
    "\n",
    "# Export result to Excel. Comment out if you don't need it.\n",
    "result.to_excel(\"output.xlsx\")  \n",
    "\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ROC</th>\n",
       "      <th>SC60_Stage1_Points</th>\n",
       "      <th>SC70_Stage1_Points</th>\n",
       "      <th>Lift</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State_Group</th>\n",
       "      <th>Seg_FICO</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">CA</th>\n",
       "      <th>9000s</th>\n",
       "      <td>0.682888</td>\n",
       "      <td>0.687413</td>\n",
       "      <td>0.006626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Missing</th>\n",
       "      <td>0.593959</td>\n",
       "      <td>0.601685</td>\n",
       "      <td>0.013007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Valid</th>\n",
       "      <td>0.712173</td>\n",
       "      <td>0.724650</td>\n",
       "      <td>0.017519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">FL</th>\n",
       "      <th>9000s</th>\n",
       "      <td>0.664344</td>\n",
       "      <td>0.673044</td>\n",
       "      <td>0.013095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Missing</th>\n",
       "      <td>0.547091</td>\n",
       "      <td>0.549321</td>\n",
       "      <td>0.004076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Valid</th>\n",
       "      <td>0.721664</td>\n",
       "      <td>0.727314</td>\n",
       "      <td>0.007828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Others</th>\n",
       "      <th>9000s</th>\n",
       "      <td>0.658276</td>\n",
       "      <td>0.682075</td>\n",
       "      <td>0.036153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Missing</th>\n",
       "      <td>0.635129</td>\n",
       "      <td>0.616072</td>\n",
       "      <td>-0.030004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Valid</th>\n",
       "      <td>0.707004</td>\n",
       "      <td>0.731658</td>\n",
       "      <td>0.034872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">TX</th>\n",
       "      <th>9000s</th>\n",
       "      <td>0.663899</td>\n",
       "      <td>0.666372</td>\n",
       "      <td>0.003725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Missing</th>\n",
       "      <td>0.589351</td>\n",
       "      <td>0.592220</td>\n",
       "      <td>0.004869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Valid</th>\n",
       "      <td>0.700304</td>\n",
       "      <td>0.715987</td>\n",
       "      <td>0.022394</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "ROC                   SC60_Stage1_Points  SC70_Stage1_Points      Lift\n",
       "State_Group Seg_FICO                                                  \n",
       "CA          9000s               0.682888            0.687413  0.006626\n",
       "            Missing             0.593959            0.601685  0.013007\n",
       "            Valid               0.712173            0.724650  0.017519\n",
       "FL          9000s               0.664344            0.673044  0.013095\n",
       "            Missing             0.547091            0.549321  0.004076\n",
       "            Valid               0.721664            0.727314  0.007828\n",
       "Others      9000s               0.658276            0.682075  0.036153\n",
       "            Missing             0.635129            0.616072 -0.030004\n",
       "            Valid               0.707004            0.731658  0.034872\n",
       "TX          9000s               0.663899            0.666372  0.003725\n",
       "            Missing             0.589351            0.592220  0.004869\n",
       "            Valid               0.700304            0.715987  0.022394"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Example 5: calculate ROC for two scores group by State and Segment\n",
    "\n",
    "# Define FICO Segment and State Group\n",
    "seg_map = {\n",
    "    '7A': 'Valid',\n",
    "    '7B': 'Valid',\n",
    "    '7C': 'Valid',\n",
    "    '7D': 'Valid',\n",
    "    '7E': 'Valid',\n",
    "    '7F': 'Valid',\n",
    "    '7G': 'Valid',\n",
    "    '7H': 'Valid',\n",
    "    '7I': '9000s',\n",
    "    '7J': '9000s',\n",
    "    '7K': '9000s',\n",
    "    '7L': '9000s',\n",
    "    '7M': 'Missing',\n",
    "    '7N': 'Missing'\n",
    "}\n",
    "\n",
    "state_map = {\n",
    "    'CA': 'CA',\n",
    "    'TX': 'TX',\n",
    "    'FL': 'FL',\n",
    "    'AZ': 'Others',\n",
    "    'CO': 'Others',\n",
    "    'ID': 'Others',\n",
    "    'MN': 'Others',\n",
    "    'NM': 'Others',\n",
    "    'NV': 'Others',\n",
    "    'OR': 'Others',\n",
    "    'UT': 'Others',\n",
    "    'WA': 'Others',\n",
    "    'WY': 'Others'\n",
    "}\n",
    "\n",
    "df['Seg_FICO'] = df['SC70_Segment'].map(seg_map)\n",
    "df['State_Group'] = df['Model_State'].map(state_map)\n",
    "\n",
    "# Calculate ROC for two scores within each state and segment.\n",
    "result = df.groupby(['State_Group','Seg_FICO']).apply(roc_calc, target, score1, score2)\n",
    "\n",
    "# Put in the Lift column\n",
    "result['Lift'] = np.vectorize(lift)(result[score1],result[score2])\n",
    "\n",
    "# Export result to Excel. Comment out if you don't need it.\n",
    "result.to_excel(\"output.xlsx\")  \n",
    "\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LN_Key</th>\n",
       "      <th>A_R</th>\n",
       "      <th>SC70_Stage1_Points</th>\n",
       "      <th>SC70_Stage2_Points</th>\n",
       "      <th>SC70_Segment</th>\n",
       "      <th>SC60_Stage1_Points</th>\n",
       "      <th>SC60_Stage2_Points</th>\n",
       "      <th>SC60_Segment</th>\n",
       "      <th>Model_State</th>\n",
       "      <th>FICCLAV8_SCORE</th>\n",
       "      <th>...</th>\n",
       "      <th>CLOSE_DATE</th>\n",
       "      <th>OPEN_YEARMONTH</th>\n",
       "      <th>CLOSE_YEARMONTH</th>\n",
       "      <th>DR_ORIGBAL</th>\n",
       "      <th>GAIN</th>\n",
       "      <th>G_B</th>\n",
       "      <th>DAYS_LATE</th>\n",
       "      <th>PAIDMO</th>\n",
       "      <th>BAD_CLOSECODE_Indicator</th>\n",
       "      <th>TimePeriod</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>L008428</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>198</td>\n",
       "      <td>0.511509</td>\n",
       "      <td>7F</td>\n",
       "      <td>184</td>\n",
       "      <td>0.6447</td>\n",
       "      <td>6F</td>\n",
       "      <td>FL</td>\n",
       "      <td>477.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20180327.0</td>\n",
       "      <td>201708</td>\n",
       "      <td>201803.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>753.72</td>\n",
       "      <td>INDET</td>\n",
       "      <td>653</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>L025832</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>238</td>\n",
       "      <td>0.248504</td>\n",
       "      <td>7F</td>\n",
       "      <td>231</td>\n",
       "      <td>0.3312</td>\n",
       "      <td>6F</td>\n",
       "      <td>FL</td>\n",
       "      <td>608.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20180906.0</td>\n",
       "      <td>201702</td>\n",
       "      <td>201809.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4412.10</td>\n",
       "      <td>GOOD</td>\n",
       "      <td>460</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>L025651</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>239</td>\n",
       "      <td>0.323428</td>\n",
       "      <td>7D</td>\n",
       "      <td>231</td>\n",
       "      <td>0.3791</td>\n",
       "      <td>6D</td>\n",
       "      <td>CA</td>\n",
       "      <td>638.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20190304.0</td>\n",
       "      <td>201703</td>\n",
       "      <td>201903.0</td>\n",
       "      <td>9141.34</td>\n",
       "      <td>-3081.20</td>\n",
       "      <td>BAD</td>\n",
       "      <td>370</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>L025855</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>195</td>\n",
       "      <td>0.613916</td>\n",
       "      <td>7M</td>\n",
       "      <td>189</td>\n",
       "      <td>0.6429</td>\n",
       "      <td>6K</td>\n",
       "      <td>CA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>20171106.0</td>\n",
       "      <td>201608</td>\n",
       "      <td>201711.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2722.80</td>\n",
       "      <td>GOOD</td>\n",
       "      <td>576</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>L026313</td>\n",
       "      <td>Accepts</td>\n",
       "      <td>228</td>\n",
       "      <td>0.303659</td>\n",
       "      <td>7D</td>\n",
       "      <td>225</td>\n",
       "      <td>0.3238</td>\n",
       "      <td>6D</td>\n",
       "      <td>CA</td>\n",
       "      <td>555.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>201701</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>893.86</td>\n",
       "      <td>GOOD</td>\n",
       "      <td>-18</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>Dev</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    LN_Key      A_R  SC70_Stage1_Points  SC70_Stage2_Points SC70_Segment  \\\n",
       "0  L008428  Accepts                 198            0.511509           7F   \n",
       "1  L025832  Accepts                 238            0.248504           7F   \n",
       "2  L025651  Accepts                 239            0.323428           7D   \n",
       "3  L025855  Accepts                 195            0.613916           7M   \n",
       "4  L026313  Accepts                 228            0.303659           7D   \n",
       "\n",
       "   SC60_Stage1_Points  SC60_Stage2_Points SC60_Segment Model_State  \\\n",
       "0                 184              0.6447           6F          FL   \n",
       "1                 231              0.3312           6F          FL   \n",
       "2                 231              0.3791           6D          CA   \n",
       "3                 189              0.6429           6K          CA   \n",
       "4                 225              0.3238           6D          CA   \n",
       "\n",
       "   FICCLAV8_SCORE  ...  CLOSE_DATE OPEN_YEARMONTH CLOSE_YEARMONTH DR_ORIGBAL  \\\n",
       "0           477.0  ...  20180327.0         201708        201803.0        NaN   \n",
       "1           608.0  ...  20180906.0         201702        201809.0        NaN   \n",
       "2           638.0  ...  20190304.0         201703        201903.0    9141.34   \n",
       "3             NaN  ...  20171106.0         201608        201711.0        NaN   \n",
       "4           555.0  ...         NaN         201701             NaN        NaN   \n",
       "\n",
       "      GAIN    G_B  DAYS_LATE  PAIDMO  BAD_CLOSECODE_Indicator  TimePeriod  \n",
       "0   753.72  INDET        653       4                        0         Dev  \n",
       "1  4412.10   GOOD        460      16                        0         Dev  \n",
       "2 -3081.20    BAD        370      19                        1         Dev  \n",
       "3  2722.80   GOOD        576      19                        0         Dev  \n",
       "4   893.86   GOOD        -18      33                        0         Dev  \n",
       "\n",
       "[5 rows x 44 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(r'\\\\neptune\\RAD\\4 Models\\Scorecard 7.0\\Subpopulation Study\\Lift\\data prepare\\DEV\\Total.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SC60_Stage2_Points    0.711602\n",
       "SC70_Stage2_Points    0.725188\n",
       "Name: ROC, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_calc(df, 'G_B', 'SC60_Stage2_Points','SC70_Stage2_Points')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SC60_Stage2_Points    0.711602\n",
       "SC70_Stage2_Points    0.725188\n",
       "Name: ROC, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_calc(df, target, score3, score4)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
